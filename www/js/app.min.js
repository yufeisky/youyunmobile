!function(a,b){"function"==typeof define&&(define.amd||define.cmd)?define(function(){return b(a)}):b(a,!0)}(this,function(a,b){function c(b,c,d){a.WeixinJSBridge?WeixinJSBridge.invoke(b,e(c),function(a){g(b,a,d)}):j(b,d)}function d(b,c,d){a.WeixinJSBridge?WeixinJSBridge.on(b,function(a){d&&d.trigger&&d.trigger(a),g(b,a,c)}):d?j(b,d):j(b,c)}function e(a){return a=a||{},a.appId=z.appId,a.verifyAppId=z.appId,a.verifySignType="sha1",a.verifyTimestamp=z.timestamp+"",a.verifyNonceStr=z.nonceStr,a.verifySignature=z.signature,a}function f(a){return{timeStamp:a.timestamp+"",nonceStr:a.nonceStr,"package":a.package,paySign:a.paySign,signType:a.signType||"SHA1"}}function g(a,b,c){var d,e,f;switch(delete b.err_code,delete b.err_desc,delete b.err_detail,d=b.errMsg,d||(d=b.err_msg,delete b.err_msg,d=h(a,d,c),b.errMsg=d),c=c||{},c._complete&&(c._complete(b),delete c._complete),d=b.errMsg||"",z.debug&&!c.isInnerInvoke&&alert(JSON.stringify(b)),e=d.indexOf(":"),f=d.substring(e+1)){case"ok":c.success&&c.success(b);break;case"cancel":c.cancel&&c.cancel(b);break;default:c.fail&&c.fail(b)}c.complete&&c.complete(b)}function h(a,b){var d,e,f,g;if(b){switch(d=b.indexOf(":"),a){case o.config:e="config";break;case o.openProductSpecificView:e="openProductSpecificView";break;default:e=b.substring(0,d),e=e.replace(/_/g," "),e=e.replace(/\b\w+\b/g,function(a){return a.substring(0,1).toUpperCase()+a.substring(1)}),e=e.substring(0,1).toLowerCase()+e.substring(1),e=e.replace(/ /g,""),-1!=e.indexOf("Wcpay")&&(e=e.replace("Wcpay","WCPay")),f=p[e],f&&(e=f)}g=b.substring(d+1),"confirm"==g&&(g="ok"),"failed"==g&&(g="fail"),-1!=g.indexOf("failed_")&&(g=g.substring(7)),-1!=g.indexOf("fail_")&&(g=g.substring(5)),g=g.replace(/_/g," "),g=g.toLowerCase(),("access denied"==g||"no permission to execute"==g)&&(g="permission denied"),"config"==e&&"function not exist"==g&&(g="ok"),b=e+":"+g}return b}function i(a){var b,c,d,e;if(a){for(b=0,c=a.length;c>b;++b)d=a[b],e=o[d],e&&(a[b]=e);return a}}function j(a,b){if(z.debug&&!b.isInnerInvoke){var c=p[a];c&&(a=c),b&&b._complete&&delete b._complete,console.log('"'+a+'",',b||"")}}function k(){if(!("6.0.2">w||y.systemType<0)){var b=new Image;y.appId=z.appId,y.initTime=x.initEndTime-x.initStartTime,y.preVerifyTime=x.preVerifyEndTime-x.preVerifyStartTime,C.getNetworkType({isInnerInvoke:!0,success:function(a){y.networkType=a.networkType;var c="https://open.weixin.qq.com/sdk/report?v="+y.version+"&o="+y.isPreVerifyOk+"&s="+y.systemType+"&c="+y.clientVersion+"&a="+y.appId+"&n="+y.networkType+"&i="+y.initTime+"&p="+y.preVerifyTime+"&u="+y.url;b.src=c}})}}function l(){return(new Date).getTime()}function m(b){t&&(a.WeixinJSBridge?b():q.addEventListener&&q.addEventListener("WeixinJSBridgeReady",b,!1))}function n(){C.invoke||(C.invoke=function(b,c,d){a.WeixinJSBridge&&WeixinJSBridge.invoke(b,e(c),d)},C.on=function(b,c){a.WeixinJSBridge&&WeixinJSBridge.on(b,c)})}var o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;if(!a.jWeixin)return o={config:"preVerifyJSAPI",onMenuShareTimeline:"menu:share:timeline",onMenuShareAppMessage:"menu:share:appmessage",onMenuShareQQ:"menu:share:qq",onMenuShareWeibo:"menu:share:weiboApp",previewImage:"imagePreview",getLocation:"geoLocation",openProductSpecificView:"openProductViewWithPid",addCard:"batchAddCard",openCard:"batchViewCard",chooseWXPay:"getBrandWCPayRequest"},p=function(){var b,a={};for(b in o)a[o[b]]=b;return a}(),q=a.document,r=q.title,s=navigator.userAgent.toLowerCase(),t=-1!=s.indexOf("micromessenger"),u=-1!=s.indexOf("android"),v=-1!=s.indexOf("iphone")||-1!=s.indexOf("ipad"),w=function(){var a=s.match(/micromessenger\/(\d+\.\d+\.\d+)/)||s.match(/micromessenger\/(\d+\.\d+)/);return a?a[1]:""}(),x={initStartTime:l(),initEndTime:0,preVerifyStartTime:0,preVerifyEndTime:0},y={version:1,appId:"",initTime:0,preVerifyTime:0,networkType:"",isPreVerifyOk:1,systemType:v?1:u?2:-1,clientVersion:w,url:encodeURIComponent(location.href)},z={},A={_completes:[]},B={state:0,res:{}},m(function(){x.initEndTime=l()}),C={config:function(a){z=a,j("config",a),m(function(){c(o.config,{verifyJsApiList:i(z.jsApiList)},function(){A._complete=function(a){x.preVerifyEndTime=l(),B.state=1,B.res=a},A.success=function(){y.isPreVerifyOk=0},A.fail=function(a){A._fail?A._fail(a):B.state=-1};var a=A._completes;return a.push(function(){z.debug||k()}),A.complete=function(b){for(var c=0,d=a.length;d>c;++c)a[c](b);A._completes=[]},A}()),x.preVerifyStartTime=l()}),z.beta&&n()},ready:function(a){0!=B.state?a():(A._completes.push(a),!t&&z.debug&&a())},error:function(a){"6.0.2">w||(-1==B.state?a(B.res):A._fail=a)},checkJsApi:function(a){var b=function(a){var c,d,b=a.checkResult;for(c in b)d=p[c],d&&(b[d]=b[c],delete b[c]);return a};c("checkJsApi",{jsApiList:i(a.jsApiList)},function(){return a._complete=function(a){if(u){var c=a.checkResult;c&&(a.checkResult=JSON.parse(c))}a=b(a)},a}())},onMenuShareTimeline:function(a){d(o.onMenuShareTimeline,{complete:function(){c("shareTimeline",{title:a.title||r,desc:a.title||r,img_url:a.imgUrl,link:a.link||location.href},a)}},a)},onMenuShareAppMessage:function(a){d(o.onMenuShareAppMessage,{complete:function(){c("sendAppMessage",{title:a.title||r,desc:a.desc||"",link:a.link||location.href,img_url:a.imgUrl,type:a.type||"link",data_url:a.dataUrl||""},a)}},a)},onMenuShareQQ:function(a){d(o.onMenuShareQQ,{complete:function(){c("shareQQ",{title:a.title||r,desc:a.desc||"",img_url:a.imgUrl,link:a.link||location.href},a)}},a)},onMenuShareWeibo:function(a){d(o.onMenuShareWeibo,{complete:function(){c("shareWeiboApp",{title:a.title||r,desc:a.desc||"",img_url:a.imgUrl,link:a.link||location.href},a)}},a)},startRecord:function(a){c("startRecord",{},a)},stopRecord:function(a){c("stopRecord",{},a)},onVoiceRecordEnd:function(a){d("onVoiceRecordEnd",a)},playVoice:function(a){c("playVoice",{localId:a.localId},a)},pauseVoice:function(a){c("pauseVoice",{localId:a.localId},a)},stopVoice:function(a){c("stopVoice",{localId:a.localId},a)},onVoicePlayEnd:function(a){d("onVoicePlayEnd",a)},uploadVoice:function(a){c("uploadVoice",{localId:a.localId,isShowProgressTips:0==a.isShowProgressTips?0:1},a)},downloadVoice:function(a){c("downloadVoice",{serverId:a.serverId,isShowProgressTips:0==a.isShowProgressTips?0:1},a)},translateVoice:function(a){c("translateVoice",{localId:a.localId,isShowProgressTips:0==a.isShowProgressTips?0:1},a)},chooseImage:function(a){c("chooseImage",{scene:"1|2",count:a.count||9,sizeType:a.sizeType||["original","compressed"]},function(){return a._complete=function(a){if(u){var b=a.localIds;b&&(a.localIds=JSON.parse(b))}},a}())},previewImage:function(a){c(o.previewImage,{current:a.current,urls:a.urls},a)},uploadImage:function(a){c("uploadImage",{localId:a.localId,isShowProgressTips:0==a.isShowProgressTips?0:1},a)},downloadImage:function(a){c("downloadImage",{serverId:a.serverId,isShowProgressTips:0==a.isShowProgressTips?0:1},a)},getNetworkType:function(a){var b=function(a){var c,d,e,b=a.errMsg;if(a.errMsg="getNetworkType:ok",c=a.subtype,delete a.subtype,c)a.networkType=c;else switch(d=b.indexOf(":"),e=b.substring(d+1)){case"wifi":case"edge":case"wwan":a.networkType=e;break;default:a.errMsg="getNetworkType:fail"}return a};c("getNetworkType",{},function(){return a._complete=function(a){a=b(a)},a}())},openLocation:function(a){c("openLocation",{latitude:a.latitude,longitude:a.longitude,name:a.name||"",address:a.address||"",scale:a.scale||28,infoUrl:a.infoUrl||""},a)},getLocation:function(a){a=a||{},c(o.getLocation,{type:a.type||"wgs84"},function(){return a._complete=function(a){delete a.type},a}())},hideOptionMenu:function(a){c("hideOptionMenu",{},a)},showOptionMenu:function(a){c("showOptionMenu",{},a)},closeWindow:function(a){a=a||{},c("closeWindow",{immediate_close:a.immediateClose||0},a)},hideMenuItems:function(a){c("hideMenuItems",{menuList:a.menuList},a)},showMenuItems:function(a){c("showMenuItems",{menuList:a.menuList},a)},hideAllNonBaseMenuItem:function(a){c("hideAllNonBaseMenuItem",{},a)},showAllNonBaseMenuItem:function(a){c("showAllNonBaseMenuItem",{},a)},scanQRCode:function(a){a=a||{},c("scanQRCode",{needResult:a.needResult||0,scanType:a.scanType||["qrCode","barCode"]},function(){return a._complete=function(a){var b,c;v&&(b=a.resultStr,b&&(c=JSON.parse(b),a.resultStr=c&&c.scan_code&&c.scan_code.scan_result))},a}())},openProductSpecificView:function(a){c(o.openProductSpecificView,{pid:a.productId,view_type:a.viewType||0},a)},addCard:function(a){var e,f,g,h,b=a.cardList,d=[];for(e=0,f=b.length;f>e;++e)g=b[e],h={card_id:g.cardId,card_ext:g.cardExt},d.push(h);c(o.addCard,{card_list:d},function(){return a._complete=function(a){var c,d,e,b=a.card_list;if(b){for(b=JSON.parse(b),c=0,d=b.length;d>c;++c)e=b[c],e.cardId=e.card_id,e.cardExt=e.card_ext,e.isSuccess=e.is_succ?!0:!1,delete e.card_id,delete e.card_ext,delete e.is_succ;a.cardList=b,delete a.card_list}},a}())},chooseCard:function(a){c("chooseCard",{app_id:z.appId,location_id:a.shopId||"",sign_type:a.signType||"SHA1",card_id:a.cardId||"",card_type:a.cardType||"",card_sign:a.cardSign,time_stamp:a.timestamp+"",nonce_str:a.nonceStr},function(){return a._complete=function(a){a.cardList=a.choose_card_info,delete a.choose_card_info},a}())},openCard:function(a){var e,f,g,h,b=a.cardList,d=[];for(e=0,f=b.length;f>e;++e)g=b[e],h={card_id:g.cardId,code:g.code},d.push(h);c(o.openCard,{card_list:d},a)},chooseWXPay:function(a){c(o.chooseWXPay,f(a),a)}},b&&(a.wx=a.jWeixin=C),C});
// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
angular.module('IonicClub', ['ionic', 'IonicClub.router', 'IonicClub.controllers', 'IonicClub.services', 'IonicClub.filters', 'IonicClub.directives', 'IonicClub.pluginServices', 'ngCordova', 'LocalStorageModule', 'pasvaz.bindonce', 'angularMoment'])

    .run(['$ionicPlatform', '$rootScope', '$state', '$timeout', '$ionicHistory', '$cordovaAppVersion', '$ionicPopup', '$ionicLoading', '$cordovaFileTransfer', '$cordovaFile', '$cordovaFileOpener2', '$cordovaProgress', 'ToastService', 'SplashscreenService', 'UmengService', 'amMoment', function ($ionicPlatform, $rootScope, $state, $timeout, $ionicHistory, $cordovaAppVersion, $ionicPopup, $ionicLoading, $cordovaFileTransfer, $cordovaFile, $cordovaFileOpener2, $cordovaProgress, ToastService, SplashscreenService, UmengService, amMoment) {
        $ionicPlatform.ready(function () {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            if (window.cordova && window.cordova.plugins.Keyboard) {
                cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
            }
            if (window.StatusBar) {
                StatusBar.styleDefault();
            }


            // 启动友盟统计
            // UmengService.init();


            // 隐藏启动画面
            SplashscreenService.hide();

            // set moment locale
            amMoment.changeLocale('zh-cn');
        });

        // 双击退出
        $ionicPlatform.registerBackButtonAction(function (e) {
            if ($state.includes('tab.topics')) {
                if ($rootScope.backButtonPressedOnceToExit) {
                    //退出前保存统计数据
                    window.plugins.umengAnalyticsPlugin.onKillProcess();
                    ionic.Platform.exitApp();
                } else {
                    $rootScope.backButtonPressedOnceToExit = true;
                    ToastService.showShortTop('再按一次退出系统');
                    setTimeout(function () {
                        $rootScope.backButtonPressedOnceToExit = false;
                    }, 2000);
                }
            } else if ($state.includes('tab.account') || $state.includes('tab.login')) {
                $state.go('tab.topics');
            }
            else if ($ionicHistory.backView()) {
                $ionicHistory.goBack();
            } else {
                if ($rootScope.backButtonPressedOnceToExit) {
                    //退出前保存统计数据
                    window.plugins.umengAnalyticsPlugin.onKillProcess();
                    ionic.Platform.exitApp();
                }
                $rootScope.backButtonPressedOnceToExit = true;
                ToastService.showShortTop('再按一次退出系统');
                setTimeout(function () {
                    $rootScope.backButtonPressedOnceToExit = false;
                }, 2000);
            }
            e.preventDefault();
            return false;
        }, 101);
    }])

    .config(['$ionicConfigProvider', 'localStorageServiceProvider', function ($ionicConfigProvider, localStorageServiceProvider) {

        localStorageServiceProvider.setPrefix('ZxjIonicClub');

        $ionicConfigProvider.tabs.style('standard');
        $ionicConfigProvider.tabs.position('bottom');
        $ionicConfigProvider.navBar.alignTitle('center');
        $ionicConfigProvider.backButton.icon('ion-ios-arrow-thin-left');
        $ionicConfigProvider.views.transition('no');

        Date.prototype.format = function (format) {
            var o = {
                "M+": this.getMonth() + 1, //month
                "d+": this.getDate(), //day
                "h+": this.getHours(), //hour
                "m+": this.getMinutes(), //minute
                "s+": this.getSeconds(), //second
                "q+": Math.floor((this.getMonth() + 3) / 3), //quarter
                "S": this.getMilliseconds() //millisecond
            };

            if (/(y+)/.test(format)) {
                format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
            }

            for (var k in o) {
                if (new RegExp("(" + k + ")").test(format)) {
                    format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
                }
            }
            return format;
        };
    }]);

/**
 * 路由
 */
angular.module('IonicClub.router', [])
    .config(['$provide', '$stateProvider', '$urlRouterProvider', function($provide, $stateProvider, $urlRouterProvider) {
        // Ionic uses AngularUI Router which uses the concept of states
        // Learn more here: https://github.com/angular-ui/ui-router
        // Set up the various states which the app can be in.
        // Each state's controller can be found in controllers.js
        $stateProvider
            .state('tab', {
                url: "/tab",
                abstract: true,
                templateUrl: "templates/tabs.html"
            })
            .state('tab.home', {
                url: '/home',
                views: {
                    'home': {
                        templateUrl: 'templates/home.html',
                        controller: 'homeCtrl'
                    }
                },
                // 检测要是没有登陆  跳回到登录页
                resolve: {
                    validater: ['$rootScope', 'WechatApi', function($rootScope, WechatApi) {
                        console.log('重置微信分享');
                        //重置微信分享
                        $rootScope.upal_share = {
                            title: '悠云轻故事', // 分享标题
                            desc: '我们期待你的加入', // 分享描述
                            share_link: 'http://www.upalapp.com/app/2016070401/index.html', // 分享链接
                            imgUrl: 'http://www.upalapp.com/app/2016070401/img/p01.png', // 分享图标
                            currentUrl: location.href //当前页面的网址，签名的时候要用
                        };
                        WechatApi.f_wxReady();
                    }]
                }
                // cache:false,
            })
            .state('tab.homeDetail', {
                // url: '/homeDetail:pubUrl:imgSrc:storyId:storyTitle:secondTitle:shareCount:browseCount:collectCount',
                url: '/homeDetail:storyObject',
                views: {
                    'home': {
                        templateUrl: 'templates/homeDetail.html',
                        controller: 'homeDetailCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.lbs', {
                url: '/lbs',
                views: {
                    'lbs': {
                        templateUrl: 'templates/lbs.html',
                        controller: 'lbsCtrl'
                    }
                },
                // cache:false,
            })
            .state('tab.lbsGroupDetail', {
                // url: '/homeDetail:pubUrl:imgSrc:storyId:storyTitle:secondTitle:shareCount:browseCount:collectCount',
                url: '/lbsGroupDetail:lbsStoryList',
                views: {
                    'lbs': {
                        templateUrl: 'templates/lbsGroupDetail.html',
                        controller: 'lbsGroupDetailCtrl'
                    }
                }
            })
            .state('tab.design', {
                url: '/design',
                views: {
                    'design': {
                        templateUrl: 'templates/design.html',
                        controller: 'designCtrl'
                    }
                },
                // cache:false,
            })
            .state('tab.moreDesign', {
                url: '/moreDesign:designType:main',
                views: {
                    'design': {
                        templateUrl: 'templates/moredesign.html',
                        controller: 'moreDesignCtrl'
                    }
                },
                cache:false,
                // cache:false,
            })
            .state('tab.designDetail', {
                // url: '/homeDetail:pubUrl:imgSrc:storyId:storyTitle:secondTitle:shareCount:browseCount:collectCount',
                url: '/designDetail:itemPars',
                views: {
                    'design': {
                        templateUrl: 'templates/designDetail.html',
                        controller: 'designDetailCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.previewStory', {
                url: '/previewStory:storyInfo',
                views: {
                    'design': {
                        templateUrl: 'templates/previewStory.html',
                        controller: 'previewStoryCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.setStoryInfo', {
                url: '/setStoryInfo:storyInfo',
                views: {
                    'design': {
                        templateUrl: 'templates/setStoryInfo.html',
                        controller: 'setStoryInfoCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.setStoryCategories', {
                url: '/setStoryCategories:storyInfo',
                views: {
                    'design': {
                        templateUrl: 'templates/setStoryCategories.html',
                        controller: 'setStoryCategoriesCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.edit', {
                url: '/edit:storyId',
                views: {
                    'design': {
                        templateUrl: 'templates/edit.html',
                        controller: 'editCtrl'
                    }
                },
                cache:false,
            })
            .state('tab.user', {
                url: '/user',
                views: {
                    'user': {
                        templateUrl: 'templates/user.html',
                        controller: 'userCtrl',

                    }
                },
                // 检测要是没有登陆  跳回到登录页
                // resolve: {
                //     validater: ['$location', 'localStorageService', function($location, localStorageService) {
                //         var loginInfo = localStorageService.get('User');
                //         // var loginInfo = '';
                //         if (!loginInfo) {
                //             $location.path('/login');
                //         }
                //     }]
                // }
            });
        // .state('tab.user.userstory', {
        //     url: '/userstory',
        //     views: {
        //         'userstory': {
        //             templateUrl: 'templates/userstory.html',
        //             controller: 'userstoryCtrl'
        //         }
        //     },
        //     // 检测要是没有登陆  跳回到登录页
        //     resolve: {
        //         validater: ['$location', 'localStorageService', function($location, localStorageService) {
        //             var loginInfo = localStorageService.get('User');
        //             // var loginInfo = '';
        //             if (!loginInfo) {
        //                 $location.path('/login');
        //             }
        //         }]
        //     }
        // })
        // .state('login', {
        //     url: '/login',
        //     templateUrl: "templates/login.html",
        //     controller: 'loginCtrl',
        //     cache:false,
        //     resolve: {
        //         validater: ['$location', 'localStorageService', function($location, localStorageService) {
        //             var loginInfo = localStorageService.get('User');
        //             if (loginInfo) {
        //                 // $location.path('/tab/user');
        //                 $ionicHistory.goBack();
        //             }
        //         }]
        //     }
        //     // views: {
        //     //     'user': {
        //     //         templateUrl: 'templates/login.html',
        //     //         controller: 'loginCtrl'
        //     //     }
        //     // },

        // });

        $urlRouterProvider.otherwise('tab/home');
    }]);

/**
 * create by linbin
 * 服务
 */
angular.module('IonicClub.services', [])
    // Ionic
    .service('IonicService', ['$http', '$q', 'ConfigService', function($http, $q, ConfigService) {
        return {
            //登录
            postLogin: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/admin/ajaxUserLogin';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取手机验证码:
            postPhoneCode: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/admin/ajaxSendValidate';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //手机快速登录:
            postQuickLogin: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/admin/ajaxPhoneLogin';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取上线跟未上线的故事数据
            getStorys: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/moblie/story/ajaxGetStotyList';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取首页故事数据
            getHomeStorys: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/moblie/story/ajaxGetHomePageStorysList';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取收藏故事数据
            getCollectStorys: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/moblie/story/ajaxGetFavoriteStorysList';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //收藏
            postCollectStory: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/moblie/story/addUserFavorite';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //分享
            postShareStory: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/moblie/story/addUserShare';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //要修改的故事数据接口
            postStoryData: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/page/test2';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //修改的故事保存接口
            saveStoryData: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/page/h5save';
                // var url = 'http://192.168.4.195:8090/mobileplatform/page/h5save';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/json' },
                    // transformRequest: function(obj) {
                    //     var str = [];
                    //     for (var p in obj)
                    //         str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                    //     return str.join("&");
                    // },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取我的图片分类接口
            getMyCates: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/imagecategory/getmycategory';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },


            //获取我的图片分类接口
            getOnlineMainCates: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/imagecategory/getparentcategory';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },


            getOnlineCates: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/imagecategory/getcategory';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取图片接口
            getImages: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/image/getimage';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    params: data
                }).success(
                    function(data, status, header, config) {

                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取图片接口

            saveImage: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/image/saveimage';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取模板展示页的三大类别的最热故事
            getTemplateIndex: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/template/gettemplateindex';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                }).success(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //根据分类名获取模板展示页的故事
            getTemplateByName: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/template/gettemplate';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //获取模板分类子分类
            getChildCategoryByParentId: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/template/getchildcategory';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //根据分类id检索故事列表
            getStoryListByCategoryId: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/template/gettemplate';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //根据模板id新建轻故事
            createStoryByTemplateId: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/template/createstory';
                $http({
                    method: 'GET',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    params: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    }).error(
                    function(data, status, header, config) {
                        console.log(data);
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //得到用户信息:
            getUserInfo: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/user/getuserinfo';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
            //设置故事信息:封面 标题 描述
            setStoryInfo: function(data) {
                var deferred = $q.defer();
                var url = 'http://test.upalapp.com/mobileplatform/page/finishcreate';
                $http({
                    method: 'POST',
                    url: url,
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    transformRequest: function(obj) {
                        var str = [];
                        for (var p in obj)
                            str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
                        return str.join("&");
                    },
                    data: data
                }).success(
                    function(data, status, header, config) {
                        deferred.resolve(data);
                    });
                return deferred.promise;
            },
        };
    }])
    .service('ConfigService', [function() {
        var hostURL = "http://test.upalapp.com/";

        var service = {
            getHost: function() {
                return hostURL;
            }
        };
        return service;
    }])
    .service('TabService', function() {
        var tabs = [{
            value: 'share',
            label: '轻故事'
        }, {
            value: 'ask',
            label: '首页'
        }, {
            value: 'job',
            label: '关于'
        }, {
            value: 'bb',
            label: '吐槽'
        }];

        var service = {
            getTabs: function() {
                return tabs;
            }
        };
        return service;
    })
    // 信息提示弹出框
    .service('MsgBox', ['$timeout', function($timeout) {
        var service = {
            showTexts: function(texts, removetime) {
                var times = removetime || 1000;
                angular.element(document.body).append('<div id="msgbox" ><span>' + texts + '</span></div>');
                // console.log(angular.element(document.querySelector('#msgbox')));
                $timeout(function() {
                    angular.element(document.querySelector('#msgbox')).addClass('msgboxani');
                    $timeout(function() {
                        angular.element(document.querySelector('#msgbox')).remove();
                    }, 1000);
                }, times); //文字显示时间
            }
        };
        return service;
    }])
    // 判断是不是PC端
    .service('Tool', function() {
        var service = {
            isPC: function() {
                var userAgentInfo = navigator.userAgent;
                var Agents = ["Android", "iPhone",
                    "SymbianOS", "Windows Phone",
                    "iPad", "iPod"
                ];
                var flag = true;
                for (var v = 0; v < Agents.length; v++) {
                    if (userAgentInfo.indexOf(Agents[v]) > 0) {
                        flag = false;
                        break;
                    }
                }
                return flag;
            }
        };
        return service;
    })
    // 微信授权
    .service('WechatApi', ['$rootScope', '$http', function($rootScope, $http) {
        $rootScope.upal_share = {
            title: '随身看的轻故事H5', // 分享标题
            desc: ' 想浏览更多精彩故事？客官请点这里。', // 分享描述
            share_link: 'http://www.upalapp.com/app/2016070401/index.html', // 分享链接
            imgUrl: 'http://www.upalapp.com/app/2016070401/img/p01.png', // 分享图标
            currentUrl: location.href //当前页面的网址，签名的时候要用
        };
        var service = {
            f_wxShare: function() {

                jQuery(function() {
                    jQuery.ajax({
                        type: "get",
                        async: false,
                        url: "http://vip.upalapp.com/weixin/GetSignatureJson.do", //upal_share.currentUrl,
                        data: {
                            url: $rootScope.upal_share.currentUrl
                        },
                        dataType: "jsonp",
                        jsonp: "callbackparam",
                        success: function(data) {
                            //var data = JSON.parse(data);
                            var nonceStr = data.nonceStr;
                            var signature = data.signature;
                            var timestamp = data.timestamp;
                            wx.config({
                                debug: false,
                                appId: 'wxbca4b4a3e2f790aa',
                                timestamp: timestamp,
                                nonceStr: nonceStr,
                                signature: signature,
                                jsApiList: [
                                    'onMenuShareTimeline',
                                    'onMenuShareAppMessage',
                                    // 'translateVoice',
                                    // 'startRecord',
                                    // 'stopRecord',
                                    // 'onRecordEnd',
                                ]
                            });
                            service.f_wxReady();
                        },
                        error: function() {
                            //alert('请求失败');
                        }
                    });
                });
            },
            f_wxReady: function() {
                wx.ready(function() {
                    wx.onMenuShareAppMessage({
                        title: $rootScope.upal_share.title, // 分享标题
                        desc: $rootScope.upal_share.desc, // 分享描述
                        link: $rootScope.upal_share.share_link, // 分享链接
                        imgUrl: $rootScope.upal_share.imgUrl, // 分享图标
                        success: function() {
                            service.suc_callback();
                        },
                        cancel: function() {
                            // 用户取消分享后执行的回调函数
                        }
                    });
                    wx.onMenuShareTimeline({
                        title: $rootScope.upal_share.desc, // 分享副标题标题
                        link: $rootScope.upal_share.share_link, // 分享链接
                        imgUrl: $rootScope.upal_share.imgUrl, // 分享图标
                        success: function() {
                            service.suc_callback();
                        },
                        cancel: function() {
                            // 用户取消分享后执行的回调函数
                        }
                    });
                });
            },
            suc_callback: function() {
                // alert('分享回调成功');
                $rootScope.shareStory();
            }
        };
        return service;
    }])
    // 信息提示弹出框
    .service('Con', ['$timeout', function($timeout) {
        var service = {
            log: function(data) {
                console.log(data);
            }
        };
        return service;
    }])
    // 点击获得焦点
    .service('SectionEvent', ['$timeout', '$ionicSlideBoxDelegate', function($timeout, $ionicSlideBoxDelegate) {
        var d1 = null;
        var isSave = true;
        var isControl = true;
        var service = {
            blurFn: function($scope) {
                //要是点击的不是可以改变的元素就把之前的选中状态清除
                if (d1 && d1.obj) {
                    d1.obj = null;
                }
                //要是点击的不是可以改变的元素就把之前的选中状态清除
                if ($('.bf-basic').hasClass('mobileEvent')) {

                }
                $('.bf-basic').removeClass('mobileEvent');
                $('.leftright,.topbottom,.rightbottom,.righttop,.rightbottomcopy, .control-button ,.control-button-copy').remove();
                $('.editBox').appendTo(jQuery('.storySlideBox')).hide();
                $timeout(function() {
                        $scope.textEditHide = false;
                        $scope.textStyleEditShow = false;
                        $scope.fontFamilyEditShow = false;
                        $scope.fontColorEditShow = false;
                        $scope.fontSizeEditShow = false;
                        $scope.textAlignEditShow = false;
                        $scope.visible = false;
                        service.start();
                    })
                    // $('.editBox').hide();
            },
            // cancelblurFn: function() {
            //     //要是点击的不是可以改变的元素就把之前的选中状态清除
            //     if (d1 && d1.obj) {
            //         d1.obj = null;
            //     }
            //     //要是点击的不是可以改变的元素就把之前的选中状态清除
            //     if ($('.bf-basic').hasClass('mobileEvent')) {

            //     }
            //     $('.bf-basic').css({
            //         border: ''
            //     }).removeClass('mobileEvent');
            //     $('.leftright,.topbottom,.rightbottom,.righttop').remove();
            //     // $('.editBox').hide();
            // },
            //设置拖拽按钮的位置
            setFollow: function() {
                var rightbottomoffsetleft = $('.mobileEvent')[0].offsetLeft + $('.rightbottom')[0].offsetLeft;
                var rightbottomoffsettop = $('.mobileEvent')[0].offsetTop + $('.rightbottom')[0].offsetTop;
                $('.rightbottomcopy').css({
                    left: rightbottomoffsetleft,
                    top: rightbottomoffsettop
                });
                var leftbottomoffsetleft = $('.mobileEvent')[0].offsetLeft - 15;
                var leftbottomoffsettop = $('.mobileEvent')[0].offsetTop + $('.rightbottom')[0].offsetTop;

                console.log($('.leftbottomcopy')[0].width);

                $('.leftbottomcopy').css({
                    left: leftbottomoffsetleft,
                    top: leftbottomoffsettop
                });

                var lefttopffsetleft = $('.mobileEvent')[0].offsetLeft - 10;
                var lefttopoffsettop = $('.mobileEvent')[0].offsetTop - 10;

                $('.lefttopcopy').css({
                    left: lefttopffsetleft,
                    top: lefttopoffsettop
                });

                var righttopffsetleft = $('.mobileEvent')[0].offsetLeft + $('.rightbottom')[0].offsetLeft + 5;
                var righttopoffsettop = $('.mobileEvent')[0].offsetTop - 10;

                $('.righttopcopy').css({
                    left: righttopffsetleft,
                    top: righttopoffsettop
                });



            },
            // 设置编辑栏的位置方法
            setToolTipPoint: function(targetObj, toolTipObj) {
                toolTipObj.show();
                var storyPageWidth = $('.storyPage').width();
                // targetObj
                var targetLeft = targetObj[0].offsetLeft;
                // console.log('----------targetLeft----------');
                // console.log(targetLeft);
                var targetWidth = targetObj[0].offsetWidth;
                // console.log('----------targetWidth----------');
                // console.log(targetWidth);
                var toolTipWidth = toolTipObj[0].offsetWidth;
                // console.log('----------toolTipWidth----------');
                // console.log(toolTipWidth);
                var toolTipLeft = toolTipObj[0].offsetLeft;
                // console.log('----------toolTipLeft----------');
                // console.log(toolTipLeft);
                var targetCenter = targetLeft + targetWidth / 2;
                var rightTargetCenter = storyPageWidth - targetCenter;
                //  当为提示栏在左边时候，三角形的位置
                var leftToolPoint = (targetLeft + targetWidth) / 2;
                var rightToolPoint = targetLeft + targetWidth / 2 - toolTipLeft;

                if (targetCenter < storyPageWidth / 2) {
                    console.log('在左边');
                    toolTipObj.css({
                        left: 0,
                        right: ''
                    });
                    leftToolPoint = leftToolPoint < 20 ? 20 : leftToolPoint;
                    $('.triangle-down,.triangle-up').css({
                        left: leftToolPoint
                    });
                } else {
                    console.log('在右边');
                    var toolleft = storyPageWidth - toolTipWidth;
                    rightToolPoint = rightToolPoint > (toolTipWidth - 30) ? (toolTipWidth - 30) : rightToolPoint;
                    toolTipObj.css({
                        left: '',
                        right: 0
                    });
                    $('.triangle-down,.triangle-up').css({
                        left: rightToolPoint
                    });
                }
                //中间可以容纳的时候放中间
                if ((targetCenter > toolTipWidth / 2) && (rightTargetCenter > toolTipWidth / 2)) {
                    var middleToolLeft = targetCenter - toolTipWidth / 2;
                    toolTipObj.css({
                        left: middleToolLeft,
                        right: ''
                    });
                    $('.triangle-down,.triangle-up').css({
                        left: toolTipWidth / 2
                    });
                }
                var targetTop = targetObj[0].offsetTop;
                var targetHeight = targetObj[0].offsetHeight;
                var toolTop1 = targetTop - 45;
                var toolTop2 = targetTop + targetHeight + 20;
                if (targetTop > 45) {
                    toolTipObj.css({
                        top: toolTop1,
                    });
                    $('.triangle-up').hide();
                    $('.triangle-down').show();
                } else {
                    toolTipObj.css({
                        top: toolTop2,
                    });
                    $('.triangle-up').show();
                    $('.triangle-down').hide();
                }

            },
            stop: function() {
                isControl = false;
            },
            start: function() {
                console.log('start')
                isControl = true;
            },
            cli: function($scope) {
                jQuery(function() {
                    var $ = jQuery;
                    // console.log(jQuery('.bf-basic'))z
                    // 音乐的层级太高，编辑的时候先把音乐隐藏，等保存的时候再把它显示出来
                    if ($('.music.musicCloneCode').length > 0) {
                        $('.music.musicCloneCode').hide();
                    }


                    // 编辑元素失去焦点事件
                    // function blurFn() {
                    //     //要是点击的不是可以改变的元素就把之前的选中状态清除
                    //     if (d1.obj) {
                    //         d1.obj = null;
                    //     }
                    //     //要是点击的不是可以改变的元素就把之前的选中状态清除
                    //     if ($('.bf-basic').hasClass('mobileEvent')) {

                    //     }
                    //     $('.bf-basic').css({
                    //         border: ''
                    //     }).removeClass('mobileEvent');
                    //     $('.leftright,.topbottom,.rightbottom,.righttop').remove();
                    //     $('.editBox').hide();
                    // }
                    // jQuery('.bf-basic').on('click', function() {
                    jQuery('.storyPage').on('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        //要是点击的是可以改变的元素，就把之前的一个元素还原，让当前元素选中
                        if ($(e.target).parents('section').length > 0) {
                            service.start();
                            // console.log('even');
                            // console.log(this);
                            // console.log($(e.target).parents('section'));
                            // console.log(d1);
                            if (isSave) {
                                jQuery('.virtualSaveBtn').trigger('click');
                                isSave = false;
                            }

                            if (d1) {
                                d1.obj = null;
                            }
                            // if ($('.bf-basic').hasClass('mobileEvent')) {
                            //     console.log('有')
                            //     console.log(oldzIndex)
                            //     $('.mobileEvent').css({
                            //         zIndex: oldzIndex
                            //     });
                            // }
                            //撤销所有元素焦点
                            $('.bf-basic').css({
                                border: ''
                            }).removeClass('mobileEvent');
                            $('.leftright,.topbottom,.rightbottom,.righttop,.rightbottomcopy, .control-button, .control-button-copy').remove();
                            //给当前点击的元素获得焦点
                            $(e.target).parents('section').addClass('mobileEvent');

                            // 把第二级别的操作框隐藏
                            $scope.textStyleEditShow = false;
                            $scope.fontFamilyEditShow = false;
                            $scope.fontColorEditShow = false;
                            $scope.fontSizeEditShow = false;
                            $scope.textAlignEditShow = false;
                            $scope.visible = false;
                            // if ($scope.textStyleEditShow == true) {
                            //     console.log('文字样式框')
                            //     $scope.textStyleCancelFn();
                            // }
                            // if ($scope.fontFamilyEditShow == true) {
                            //     console.log('文字字体框')
                            //     $scope.fontFamilyCancelFn();
                            // }
                            // //当字体大小框显示的时候，取消，没有显示的时候 
                            // if ($scope.fontSizeEditShow == true) {
                            //     console.log('文字字体大小框')
                            //     $scope.fontSizeCancelFn();
                            // }
                            // console.log(oldzIndex);
                            // $('.mobileEvent').css({
                            //     zIndex: 100000
                            // })

                            // $('<div class="leftright">左右</div>').appendTo($(e.target).parents('section'));
                            // $('<div class="topbottom">上下</div>').appendTo($(e.target).parents('section'));
                            $('<div class="rightbottom "></div>').appendTo($(e.target).parents('section'));
                            $('<div class="rightbottomcopy control-button-copy icon-duodong"></div>').appendTo($(e.target).parents('.storyPage'));
                            $('<div class="leftbottomcopy control-button-copy"></div>').appendTo($(e.target).parents('.storyPage'));
                            $('<div class="lefttopcopy control-button"></div>').appendTo($(e.target).parents('.storyPage'));
                            $('<div class="righttopcopy control-button"></div>').appendTo($(e.target).parents('.storyPage'));
                            // console.log($('.rightbottom'))
                            service.setFollow();
                            // $('<div class="righttop">X</div>').appendTo($(e.target).parents('section'));


                            // 计算提示栏的位置
                            // if()
                            if ($(e.target).parents('section').find('.img-con').length === 0) {
                                $('.imgElementText').hide();
                            } else {
                                $('.imgElementText').show();
                            }

                            if ($(e.target).parents('section').find('.txt-con').length === 0) {
                                $('.editElementText').hide();
                                $timeout(function() {
                                    $scope.textEditHide = false;
                                })
                            } else {
                                $('.editElementText').show();
                                $timeout(function() {
                                    $scope.textEditHide = true;
                                })
                            }
                            // console.log($scope);
                            $('.editBox').appendTo($(e.target).parents('.storyPage'));
                            service.setToolTipPoint($(e.target).parents('section'), $('.editBox'));
                            service.drag();

                            // console.log(d1)
                        } else if ($(e.target).parent().hasClass('editBox')) {
                            console.log('点击的是编辑框');
                        } else {
                            // console.log($(e.target))
                            // 执行失去焦点事件
                            service.blurFn($scope);
                        }


                    });
                    //启用拖拽监听事件
                    // console.log(service)
                });
            },
            drag: function() {
                // console.log('拖拽开启');

                jQuery(function() {
                    var $ = jQuery;

                    function Drag() {
                        this.obj = null;
                        this.start_x = 0;
                        this.start_y = null;
                        this.sectionleft = null;
                        this.sectiontop = null;
                        this.sectionWidth = null;
                        this.sectionHeight = null;
                        //属于哪种拖拽
                        this.touchType = null; //touchMove：移动 widthMove:宽度变换 heightMove：高度变换 equalMove：等比例变换
                        this.settings = {
                            toStart: function() {  },
                            toMove: function() {},
                            toEnd: function() {}
                        };
                    }

                    Drag.prototype.init = function(opt) {
                        var This = this;
                        this.obj = $('.mobileEvent');
                        $.extend(true, this.settings, opt);
                        document.addEventListener('touchstart', function(e) { This.fnStart(e); }, false);
                        document.addEventListener('touchmove', function(e) { This.fnMove(e); }, false);
                        document.addEventListener('touchend', function(e) { This.fnEnd(e); }, false);

                    };
                    Drag.prototype.fnStart = function(e) {
                        if (isControl == false) {
                            return false;
                        }
                        // console.log(e);
                        e.preventDefault();
                        e.stopPropagation();

                        // 当拖动的目标是当前被选中元素才操作,因为修改了监听的对象为document，所以需要这个判断
                        // console.log($(e.target));

                        if ($(e.target).hasClass('rightbottomcopy') || $(e.target).hasClass('lefttopcopy') || $(e.target).hasClass('leftbottomcopy') || $(this.obj).find($(e.target)).length > 0) {
                            // console.log($(e.target));
                            this.settings.toStart();
                            e.preventDefault();
                            this.start_x = e.touches[0].pageX;
                            this.start_y = e.touches[0].pageY;
                            // console.log(this.start_y);
                            this.sectionleft = this.obj[0].offsetLeft;
                            this.sectiontop = this.obj[0].offsetTop;
                            this.sectionWidth = this.obj[0].offsetWidth;
                            this.sectionHeight = this.obj[0].offsetHeight;
                            $ionicSlideBoxDelegate.$getByHandle('sectionBox').enableSlide(false);
                            if ($(e.target).hasClass('lefttopcopy')) {
                                console.log('改变宽度');
                                this.touchType = 'widthMove';
                            } else if ($(e.target).hasClass('leftbottomcopy')) {
                                console.log('改变高度');
                                this.touchType = 'heightMove';
                            } else if ($(e.target).hasClass('rightbottomcopy')) {
                                console.log('等比例缩放');
                                this.touchType = 'equalMove';
                            } else {
                                console.log('移动');
                                this.touchType = 'touchMove';
                            }
                            if ($(e.target).hasClass('righttop')) {
                                this.touchType = 'del';
                                // this.obj.remove();
                                // $ionicSlideBoxDelegate.$getByHandle('sectionBox').enableSlide(true);
                            }
                        } else {
                            // 拖动的不是当前选中元素  slide可翻页
                            $ionicSlideBoxDelegate.$getByHandle('sectionBox').enableSlide(true);
                        }
                        return false;
                    };
                    Drag.prototype.fnMove = function(e) {
                        // 当有移动的时候需要把isSave设为true,下一次选中的时候需要保存回退数据
                        if (isControl == false) {
                            return false;
                        }
                        isSave = true;
                        // console.log(e);
                        e.preventDefault();
                        e.stopPropagation();
                        // console.log($(e.target));
                        // console.log(this.obj.find($(e.target)).length>0)
                        // console.log('--------this.obj--------');
                        // console.log(this.obj);
                        if (!$(e.target).hasClass('rightbottomcopy') && $(this.obj).find($(e.target)).length > 0) {
                            service.setToolTipPoint($(e.target).parents('section'), $('.editBox'));
                        } else {
                            $('.editBox').hide();
                        }
                        this.settings.toMove();
                        switch (this.touchType) {
                            case 'widthMove':
                                console.log('widthMove');
                                var move_W = this.sectionWidth - (e.touches[0].pageX - this.start_x);
                                var move_X = (e.touches[0].pageX - this.start_x) + this.sectionleft;
                                // console.log(this.obj);
                                // console.log(move_W);
                                // console.log(move_X);
                                this.obj.css({
                                    width: move_W,
                                    left: move_X,
                                });
                                break;
                            case 'heightMove':
                                move_H = (e.touches[0].pageY - this.start_y) + this.sectionHeight;
                                this.obj.css({
                                    height: move_H,
                                });
                                break;
                            case 'equalMove':
                                move_H = (e.touches[0].pageY - this.start_y) + this.sectionHeight;
                                move_W = move_H * this.sectionWidth / this.sectionHeight;
                                this.obj.css({
                                    width: move_W,
                                    height: move_H,
                                });
                                break;
                            case 'touchMove':
                                move_X = (e.touches[0].pageX - this.start_x) + this.sectionleft;
                                move_Y = (e.touches[0].pageY - this.start_y) + this.sectiontop;
                                this.obj.css({
                                    left: move_X,
                                    top: move_Y,
                                });
                                break;
                        }

                    };
                    Drag.prototype.fnEnd = function() {
                        if (isControl == false) {
                            return false;
                        }
                        this.settings.toEnd();
                        if (this.touchType == 'del') {
                            this.obj.remove();
                        }
                        this.touchType = null;
                        $ionicSlideBoxDelegate.$getByHandle('sectionBox').enableSlide(true);


                        // this.obj = null;//
                    };

                    d1 = new Drag();
                    d1.init({ //配置参数
                        class: '.mobileEvent',
                        toStart: function() {
                            // d1.trigger('click');
                        },
                        toMove: function() {
                            service.setFollow();

                            // $('.editBox').hide();
                        },
                        toEnd: function() {
                            // $('.editBox').show();
                        }
                    });

                });
            },
            scaleWidth: function() {

            }
        };
        return service;
    }])
    // 获取图片
    .service('Gallery', ['$ionicModal', 'IonicService', 'localStorageService', 'Con', function($ionicModal, IonicService, localStorageService, Con) {
        var initGalleryModal = function($scope) {
            var modal = $ionicModal.fromTemplateUrl('templates/gallery.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                $scope.gallerymodal = modal;
                return modal
            });
            //获取类别大类
            $scope.getOnlineMainCates = function() {
                var postParams = {
                    categoryId: 0
                };
                $scope.mainCates = [];
                IonicService.getOnlineMainCates(postParams).then(function(data) {
                    if (data.message == '0') {
                        $rootScope.loginOut();
                    }
                    angular.forEach(data.categorys, function(item) {
                        if (item.id != 1) {
                            $scope.mainCates.push(item);
                        }
                    });
                }).finally(function() {
                    Con.log('完成');
                });
            }
            $scope.getMyCates = function() {
                var User = JSON.parse(localStorageService.get('User'));
                var postParams = {
                    userToken: User.token,
                    userId: User.id,
                };
                $scope.myCates = [];
                $scope.myCates.push({ id: 1, name: "全部" });
                IonicService.getMyCates(postParams).then(function(data) {
                    if (data.message == '0') {
                        $rootScope.loginOut();
                    }
                    Con.log(data);
                    angular.forEach(data.categorys, function(item) {
                        $scope.myCates.push(item);
                    });
                    $scope.cates = $scope.myCates;
                    $scope.more = true;
                }).finally(function() {
                    Con.log('完成mycats');
                    Con.log('完成');
                });
            }
            $scope.openGalleryModal = function(galleryChoose, isHide) {
                $scope.galleryChoose = galleryChoose;

                //默认显示我的图库
                $scope.isSelf = true;
                $scope.isLine = false;
                //默认不显示种类选择
                $scope.cateShow = false;
                //默认第一页
                $scope.pageNum = 1;
                $scope.cateIndex = 0;
                console.log($scope.gallerymodal);
                $scope.gallerymodal.show();
                $scope.getOnlineMainCates();
                $scope.getMyCates();
                // 初始化Web Uploader
                var win_w = angular.element(window)[0].innerWidth;
                $scope.img_w = win_w * 0.33 * 0.9 + 'px';
                // if( $scope.uploader==null){
                var uploader = WebUploader.create({
                    // 选完文件后，是否自动上传。
                    auto: true,
                    dnd: '#uploader .queueList',
                    paste: document.body,
                    // swf文件路径
                    //swf: BASE_URL + '/js/Uploader.swf',

                    // 文件接收服务端。
                    // server: host + '/tfcm/userdiscount/uploadFile.gm',
                    server: ' http://api.upalapp.com/util/uploadFile',
                    // 选择文件的按钮。可选。
                    // 内部根据当前运行是创建，可能是input元素，也可能是flash.
                    pick: {
                        id: '#picker',
                        innerHTML: "<i class='icon-add'></i>",
                        multiple: false //是否开起同时选择多个文件能力
                    },
                    accept: {
                        title: 'Images',
                        extensions: 'gif,jpg,jpeg,bmp,png',
                        mimeTypes: 'image/*'
                    },
                    // 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！
                    resize: false,
                    compress: false,
                    sendAsBinary: false, //二进制的流的方式发送文件
                    fileNumLimit: 1,
                    duplicate: true
                });
                //console.log( $scope.img_w);
                var $list = $("#thelist"),
                    thumbnailWidth = win_w * 0.33 * 0.9;
                thumbnailHeight = win_w * 0.33 * 0.9;

                // 当有文件添加进来的时候
                uploader.on('fileQueued', function(file) {
                    var $li = $(
                            '<div id="' + file.id + '" class="file-item thumbnail">' +
                            '<img>' +
                            '<div class="info">' + file.name + '</div>' +
                            '</div>'
                        ),
                        $img = $li.find('img');

                    // $list为容器jQuery实例
                    $list.html($li);

                    // 创建缩略图
                    // 如果为非图片文件，可以不用调用此方法。
                    // thumbnailWidth x thumbnailHeight 为 100 x 100
                    uploader.makeThumb(file, function(error, src) {
                        if (error) {
                            $img.replaceWith('<span>不能预览</span>');
                            return;
                        }
                        $img.attr('src', src);
                    }, thumbnailWidth, thumbnailHeight);

                    $("#picker").hide();
                });

                // 文件上传过程中创建进度条实时显示。
                uploader.on('uploadProgress', function(file, percentage) {
                    var $li = $('#' + file.id),
                        $percent = $li.find('.progress span');

                    // 避免重复创建
                    if (!$percent.length) {
                        $percent = $('<p class="progress"><span></span></p>')
                            .appendTo($li)
                            .find('span');
                    }

                    $percent.css('width', percentage * 100 + '%');
                });

                // 文件上传成功，给item添加成功class, 用样式标记上传成功。
                uploader.on('uploadSuccess', function(file, response) {
                    //var data = JSON.parse(response);

                    //console.log(response[0])
                    $('#' + file.id).addClass('upload-state-done');
                    alert("图片上传成功");

                    var img = response[0];
                    var cate = $scope.cates[$scope.cateIndex];
                    var User = JSON.parse(localStorageService.get('User'));
                    var postParams = {
                        userToken: User.token,
                        userId: User.id,
                        categoryId: cate.id,
                        categoryName: cate.name,
                        imagePath: img.imagePath, //图片路径
                        thumbImagePath: img.thumbImagePath, //缩略图片路径
                        name: img.name, //图片名
                    };
                    IonicService.saveImage(postParams).then(function(data) {
                        if (data.message == '0') {
                            $rootScope.loginOut();
                        }
                        // console.log(data);
                        //  $scope.images.push(data.image);
                        //  Con.log($scope.images);
                        $scope.pageNum = 1;
                        $scope.galleryLoadMore();
                    }).finally(function() {

                        Con.log('完成');
                    });
                });

                // 文件上传失败，显示上传出错。
                uploader.on('uploadError', function(file) {
                    var $li = $('#' + file.id),
                        $error = $li.find('div.error');

                    // 避免重复创建
                    if (!$error.length) {
                        $error = $('<div class="error"></div>').appendTo($li);
                    }
                    $error.text('上传失败');
                    console.log("test");
                });

                // 完成上传完了，成功或者失败，先删除进度条。
                uploader.on('uploadComplete', function(file) {
                    $('#' + file.id).find('.progress').remove();
                    $list.html("");
                    $("#picker").show();
                });

                uploader.on('error', function(handler) {

                    if (handler == "Q_EXCEED_NUM_LIMIT") {
                        uploader.reset();
                    }
                    if (handler == "F_DUPLICATE") {
                        alert("文件重复");
                    }
                });
                $scope.uploader = uploader;
                //当第二个参数isHide设置为true时，隐藏在线那个栏目
                if (isHide) {
                    jQuery('.onlineBtn').hide();
                    jQuery('.gallery .gallery-option').css({
                        width: '76px'
                    });
                } else {
                    jQuery('.onlineBtn').show();
                    jQuery('.gallery .gallery-option').css({
                        width: '152px'
                    });
                }
                // }
            };
            $scope.cateChoose = function(order) {
                if ($scope.cateIndex == order) {
                    return;
                }
                $scope.cateIndex = order;
                $scope.cateShow = false;
                $scope.pageNum = 1;
                $scope.galleryLoadMore();

            }
            $scope.activeOLCateIndex = 0;
            $scope.cateSChoose = function(order) {
                $scope.activeOLCateIndex = order;
                $scope.cateIndex = 0;
                $scope.pageNum = 1;
                var parentId = $scope.mainCates[order].id
                var postParams = {
                    parentId: parentId
                };
                IonicService.getOnlineCates(postParams).then(function(data) {
                    if (data.message == '0') {
                        $rootScope.loginOut();
                    }
                    Con.log(data);
                    $scope.onLineCates = [];
                    angular.forEach(data.categorys, function(item) {
                        $scope.onLineCates.push(item);
                    });
                    $scope.cates = $scope.onLineCates;
                    $scope.galleryLoadMore();
                }).finally(function() {
                    Con.log('完成');
                });
            }

            $scope.galleryLoadMore = function() {
                $scope.more = true;
                var postParams = {
                    userId: 0,
                    categoryId: parseInt($scope.cates[$scope.cateIndex].id),
                    index: $scope.pageNum
                };
                $scope.pageNum++;
                if ($scope.isSelf) {
                    var User = JSON.parse(localStorageService.get('User'));
                    postParams.userId = User.id;
                }
                console.log(postParams.index);
                console.log($scope.cates[$scope.cateIndex].id);
                try {
                    IonicService.getImages(postParams).then(function(data) {
                        if (data.images) {
                            if (postParams.index == 1) {
                                $scope.images = data.images;
                            } else {
                                angular.forEach(data.images, function(item) {
                                    $scope.images.push(item);
                                });
                            }
                            if (data.images.length < 20) {
                                $scope.more = false;
                            }
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        } else {
                            $scope.images = [];
                            $scope.more = false;
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        }
                    });
                } catch (ex) {
                    $scope.more = false;
                }
            };

            $scope.onSelf = function() {
                $scope.isSelf = true;
                $scope.isLine = false;
                $scope.cateShow = false;
                $scope.cateIndex = 0;
                $scope.cates = $scope.myCates;
                $scope.pageNum = 1;
                $scope.galleryLoadMore();
            }

            $scope.onLine = function() {
                $scope.isSelf = false;
                $scope.isLine = true;
                $scope.cateShow = false;
                $scope.activeOLCateIndex = 0;
                $scope.currentOLCateIndex = 0;
                var parentId = $scope.mainCates[0].id
                var postParams = {
                    parentId: parentId
                };
                IonicService.getOnlineCates(postParams).then(function(data) {
                    if (data.message == '0') {
                        $rootScope.loginOut();
                    }
                    Con.log(data);
                    $scope.onLineCates = [];
                    angular.forEach(data.categorys, function(item) {
                        $scope.onLineCates.push(item);
                    });
                    $scope.cateIndex = 0;
                    $scope.cates = $scope.onLineCates;
                    $scope.pageNum = 1;
                    $scope.galleryLoadMore();
                }).finally(function() {
                    Con.log('完成');
                });
            }


            $scope.isActiveCate = function(index) {
                return index == $scope.activeOLCateIndex;
            }

            //图库注册事件
            $scope.cateOp = function() {
                $scope.cateShow = !$scope.cateShow;

            }

            $scope.imageOp = function(order) {
                var imageurl = $scope.images[order].imageurl;
                //localStorageService.set('Imageurl', imageurl);
                //$state.go('tab.edit', {storyId: storyId });
                console.log(imageurl);
                $scope.galleryChoose(imageurl);
                $scope.gallerymodal.hide();

            };

            $scope.closeGalleryModal = function() {
                $scope.gallerymodal.hide();
            };
            $scope.$on('$destroy', function() {
                $scope.gallerymodal.remove();
            });
            return modal;
        };
        return {
            initGalleryModal: initGalleryModal
        }
    }]);

/**
 * 过滤器
 */
angular.module('IonicClub.filters', [])
    .filter('trustHtml', function($sce) {
        //转义html
        return function(input) {
            return $sce.trustAsHtml(input);
        }
    })
    .filter('tabName', ['TabService', function(TabService) {
        var Tabs = TabService.getTabs();
        return function(tab) {
            for (var i in Tabs) {
                if (Tabs[i].value === tab) {
                    return Tabs[i].label;
                }
            }
        };
    }])
    .filter('link', ['$sce', function($sce) {
        return function(content) {
            if (typeof content === 'string') {
                var userLinkRegex = /href="\/user\/([\S]+)"/gi;
                var noProtocolSrcRegex = /src="\/\/([\S]+)"/gi;
                var externalLinkRegex = /href="((?!#\/user\/)[\S]+)"/gi;
                return $sce.trustAsHtml(
                    content
                    .replace(userLinkRegex, 'href="#/user/$1"')
                    .replace(noProtocolSrcRegex, 'src="https://$1"')
                    .replace(externalLinkRegex, "onClick=\"window.open('$1', '_blank', 'location=yes')\"")
                );
            }
            return content;
        };
    }])
    .filter('protocol', function() {
        return function(src) {
            // add https protocol
            if (/^\/\//gi.test(src)) {
                return 'https:' + src;
            } else {
                return src;
            }
        };
    })
    .filter('avatarFilter', function() {
        return function(src) {
            // add https protocol
            if (src) {
                src = src.replace("https://avatars.githubusercontent.com", "http://7xj5bc.com1.z0.glb.clouddn.com");
                src = src + "&imageView2/2/w/120";
            }
            return src;
        };
    });

/**
 * 指令
 */
angular.module('IonicClub.directives', [])
    //延迟滚动
    .directive('lazyScroll', ['$rootScope', '$timeout',
        function ($rootScope, $timeout) {
            return {
                restrict: 'A',
                link: function ($scope, $element) {
                    var scrollTimeoutId = 0;
                    $scope.invoke = function () {
                        $rootScope.$broadcast('lazyScrollEvent');
                    };
                    $element.bind('scroll', function () {
                        $timeout.cancel(scrollTimeoutId);
                        // wait and then invoke listeners (simulates stop event)
                        scrollTimeoutId = $timeout($scope.invoke, 0);
                    });
                }
            };
        }])
    //图片延迟加载
    .directive('lazySrc', ['$document', '$timeout',
        function ($document, $timeout) {
            return {
                restrict: 'A',
                link: function ($scope, $element, $attributes) {
                    var deregistration = $scope.$on('lazyScrollEvent', function () {
                            //console.log('scroll');
                            if (isInView()) {
                                $element[0].src = $attributes.lazySrc; // set src attribute on element (it will load image)
                                deregistration();
                            }
                        }
                    );

                    function isInView() {
                        var clientHeight = $document[0].documentElement.clientHeight;
                        var clientWidth = $document[0].documentElement.clientWidth;
                        var imageRect = $element[0].getBoundingClientRect();
                        return (imageRect.top >= 0 && imageRect.bottom <= clientHeight) && (imageRect.left >= 0 && imageRect.right <= clientWidth);
                    }

                    // bind listener
                    // listenerRemover = scrollAndResizeListener.bindListener(isInView);

                    // unbind event listeners if element was destroyed
                    // it happens when you change view, etc
                    $element.on('$destroy', function () {
                        deregistration();
                    });

                    // explicitly call scroll listener (because, some images are in viewport already and we haven't scrolled yet)
                    $timeout(function () {
                        if (isInView()) {
                            $element[0].src = $attributes.lazySrc; // set src attribute on element (it will load image)
                            deregistration();
                        }
                    }, 500);
                }
            };
        }]);
angular.module('IonicClub.pluginServices', ['ngCordova'])
    .service('NetworkService', ['$q', '$cordovaNetwork', function ($q, $cordovaNetwork) {
        return {
            // 获取网络类型
            getNetworkType: function () {
                /*
                 Connection.UNKNOWN
                 Connection.ETHERNET //以太网
                 Connection.WIFI	WiFi
                 Connection.CELL_2G
                 Connection.CELL_3G
                 Connection.CELL_4G
                 Connection.CELL  //蜂窝网络
                 Connection.NONE
                 */
                var deferred = $q.defer();
                document.addEventListener("deviceready", function () {
                    deferred.resolve($cordovaNetwork.getNetwork());
                }, false);
                return deferred.promise;
            },
            // 是否启用网络
            isOnline: function () {
                var deferred = $q.defer();
                document.addEventListener("deviceready", function () {
                    deferred.resolve($cordovaNetwork.isOnline());
                }, false);
                return deferred.promise;
            }
        };
    }])
    .service('DeviceService', ['$q', '$cordovaDevice', function ($q, $cordovaDevice) {
        return {
            //获取用户设备信息
            getDeviceInfo: function () {
                var deferred = $q.defer();
                document.addEventListener("deviceready", function () {
                    deferred.resolve("设备名称:" + $cordovaDevice.getModel() + ";运行环境:" + $cordovaDevice.getPlatform() + " " + $cordovaDevice.getVersion());
                }, false);
                return deferred.promise;
            }
        };
    }])
    // Toast服务
    .service('ToastService', ['$cordovaToast', function ($cordovaToast) {
        return {
            showShortTop: function (message) {
                $cordovaToast.showShortTop(message);
            },
            showShortCenter: function (message) {
                $cordovaToast.showShortCenter(message);
            },
            showShortBottom: function (message) {
                $cordovaToast.showShortBottom(message);
            },
            showLongTop: function (message) {
                $cordovaToast.showLongTop(message);
            },
            showLongCenter: function (message) {
                $cordovaToast.showLongCenter(message);
            },
            showLongBottom: function (message) {
                $cordovaToast.showLongBottom(message);
            }
        };
    }])
    // 启动画面服务
    .service('SplashscreenService', ['$cordovaSplashscreen', function ($cordovaSplashscreen) {
        return {
            hide: function () {
                $cordovaSplashscreen.hide();
            },
            show: function () {
                $cordovaSplashscreen.show();
            }
        };
    }])
    // 统计服务
    .service('UmengService', ['$q', '$window', function ($q, $window) {
        return {
            init: function () {
                var deferred = $q.defer();
                $window.plugins.umengAnalyticsPlugin.init();
                deferred.resolve(null);
                return deferred.promise;
            }
        };
    }])
    // APP 版本服务
    .service('AppVersionService', ['$q', '$cordovaAppVersion', function ($q, $cordovaAppVersion) {
        return {
            getVersionNumber: function () {
                var deferred = $q.defer();
                $cordovaAppVersion.getVersionNumber().then(function (version) {
                    deferred.resolve(version);
                });
                return deferred.promise;
            },
            getVersionCode: function () {
                var deferred = $q.defer();
                $cordovaAppVersion.getVersionCode().then(function (build) {
                    deferred.resolve(build);
                });
                return deferred.promise;
            }
        };
    }])

    // 社交分享服务
    .service('ShareService', ['$q', '$cordovaSocialSharing', function ($q, $cordovaSocialSharing) {
        return {
            share: function (data) {
                $cordovaSocialSharing
                    .share(data.message, data.subject, null, data.link);
            }
        };
    }]);

/**
 * 控制器入口：个人中心控制器
 */
var appController = angular.module('IonicClub.controllers', [])
    // 已上线未上线 收藏
    // 个人中心
    .controller('userCtrl', ['$scope', '$rootScope', '$stateParams', '$state', '$ionicLoading', '$ionicPopup', '$ionicHistory', '$ionicModal', '$timeout', 'localStorageService', 'IonicService', 'TabService', 'Con', function($scope, $rootScope, $stateParams, $state, $ionicLoading, $ionicPopup, $ionicHistory, $ionicModal, $timeout, localStorageService, IonicService, TabService, Con) {
        Con.log('个人中心控制器已加载');
        // 重置左上角的按钮
        // $rootScope.menuShow = true;
        // $rootScope.backShow = false;
        // // 取消收藏参数
        // $scope.deCollectData = {
        //     accesstoken: '',
        //     topic_id: ''
        // }
        var postParams = {

        };
        $scope.storys = [];
        $scope.offLineStorys = [];
        $scope.collectStorys = [];
        // // 模态框登陆
        // $ionicModal.fromTemplateUrl('templates/login.html', {
        //     scope: $scope,
        //     animation: 'slide-in-up'
        // }).then(function(modal) {
        //     $scope.loginmodal = modal;
        // });
        // $rootScope.openLoginModal = function() {
        //     $scope.loginmodal.show();
        // };
        // $rootScope.closeLoginModal = function(type) {
        //     if (type) {
        //         // Con.log($ionicHistory.viewHistory().backView.stateName);
        //         Con.log($ionicHistory.viewHistory());
        //         if ($ionicHistory.viewHistory().backView) {
        //             // Con.log($ionicHistory.viewHistory().backView);
        //             var gobackname = $ionicHistory.viewHistory().backView.stateName;
        //             $state.go(gobackname);
        //         } else {
        //             $state.go('tab.home');
        //             // 直接刷新登陆页面后退的时候需要重载首页，要不然路由会乱
        //             location.reload(true);
        //         }
        //     }
        //     $scope.loginmodal.hide();
        // };

        var User = JSON.parse(localStorageService.get('User'));
        Con.log(User);
        if (User) {
            // $scope.logined = true;
            $scope.more = true;
            Con.log('已登录');
            postParams = {
                userToken: User.token,
                userId: User.id,
            };
            // $scope.deCollectData.accesstoken = User.accesstoken;
            // IonicService.getUserByName(User.token).then(function(data) {
            //     $scope.Account = data.data;
            // })
            // IonicService.getMessages(User.accesstoken).then(function(data) {
            //     $scope.messages = data.data;
            // })


            //nav数据
            $scope.navs = [{
                title: '已上线',
                order: 0,
                storyStatus: '1',
                pageNum: 0
            }, {
                title: '未上线',
                order: 1,
                storyStatus: '0',
                pageNum: 0
            }, {
                title: '我的收藏',
                order: 2,
                storyStatus: '3',
                pageNum: 0
            }, {
                title: '我的动态',
                order: 3,
                storyStatus: '3', //本应该填4,不过暂时没有这项数据，所以暂时写3，用收藏那块的数据
                pageNum: 0
            }];

            //判断哪个选中方法:
            $scope.isActiveTab = function(order) {
                // Con.log('isactive')
                // Con.log($scope.currentTab == order)
                return $scope.currentTab == order;
            };
            $scope.doRefresh = function(myActiveSlide, del) {
                $scope.more = true;
                try {
                    $scope.currentTab = myActiveSlide;
                    $scope.myActiveSlide = myActiveSlide;
                    postParams.storyStatus = $scope.navs[myActiveSlide].storyStatus;
                    $scope.navs[myActiveSlide].pageNum = 1;
                    postParams.pageNum = $scope.navs[myActiveSlide].pageNum;
                    // -2按时间从新到旧排序
                    postParams.category=0;
                    Con.log(postParams.storyStatus);
                    switch (postParams.storyStatus) {
                        case '1':
                            IonicService.getStorys(postParams).then(function(data) {
                                // console.log(data.storys);
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.storys = data.storys;
                                    }
                                    $scope.$broadcast('scroll.infiniteScrollComplete');

                                }
                            }).finally(function() {
                                Con.log('完成');
                                $scope.$broadcast('scroll.refreshComplete');
                            });
                            break;
                        case '0':
                            IonicService.getStorys(postParams).then(function(data) {
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.refreshComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.offLineStorys = data.storys;
                                    }
                                    $scope.$broadcast('scroll.refreshComplete');
                                }
                            }).finally(function() {
                                Con.log('完成');
                                $scope.$broadcast('scroll.refreshComplete');
                            });
                            break;
                        case '3':
                            IonicService.getCollectStorys(postParams).then(function(data) {
                                Con.log(data);
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.collectStorys = data.storys;
                                    }
                                    $scope.$broadcast('scroll.refreshComplete');
                                }
                            }).finally(function() {
                                Con.log('完成');
                                $scope.$broadcast('scroll.refreshComplete');
                            });
                            break;
                            // break;
                        case '4':
                            IonicService.getCollectStorys(postParams).then(function(data) {
                                Con.log(data);
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.collectStorys = data.storys;
                                    }
                                    $scope.$broadcast('scroll.refreshComplete');
                                }
                            }).finally(function() {
                                Con.log('完成');
                                $scope.$broadcast('scroll.refreshComplete');
                            });
                            break;
                    }
                } catch (ex) {

                }
            };
            $scope.loadMore = function(myActiveSlide, del) {
                $scope.more = true;
                try {
                    $scope.currentTab = myActiveSlide;
                    $scope.myActiveSlide = myActiveSlide;
                    postParams.storyStatus = $scope.navs[myActiveSlide].storyStatus;
                    $scope.navs[myActiveSlide].pageNum = $scope.navs[myActiveSlide].pageNum + 1;
                    postParams.pageNum = $scope.navs[myActiveSlide].pageNum;
                    // -2按时间从新到旧排序
                    postParams.category=0;
                    Con.log(postParams.storyStatus);
                    switch (postParams.storyStatus) {
                        case '1':
                            IonicService.getStorys(postParams).then(function(data) {
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.storys = data.storys;
                                    } else {
                                        angular.forEach(data.storys, function(item) {
                                            $scope.storys.push(item);
                                        });
                                    }
                                    $scope.$broadcast('scroll.infiniteScrollComplete');

                                }
                            });
                            break;
                        case '0':
                            IonicService.getStorys(postParams).then(function(data) {
                                Con.log(data);
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.offLineStorys = data.storys;
                                    } else {
                                        angular.forEach(data.storys, function(item) {
                                            $scope.offLineStorys.push(item);
                                        });
                                    }
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                            });
                            break;
                        case '3':
                            IonicService.getCollectStorys(postParams).then(function(data) {
                                Con.log(data);
                                if (data.messageType == '2') {
                                    $rootScope.loginOut();
                                }
                                if (angular.equals(data.storys, [])) {
                                    $scope.more = false;
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                                if (data.storys) {
                                    if (postParams.pageNum == 1) {
                                        $scope.collectStorys = data.storys;
                                    } else {
                                        angular.forEach(data.storys, function(item) {
                                            $scope.collectStorys.push(item);
                                        });
                                    }
                                    $scope.$broadcast('scroll.infiniteScrollComplete');
                                }
                            });
                            break;
                        case '4':
                            Con.log('我的动态');
                            break;
                    }
                } catch (ex) {
                    $scope.more = false;
                }

            };
            // 当前选中：
            $scope.myActiveSlide = '0';
        } else {
            // 检测没有登陆调回到登陆页
            Con.log('未登录');
            // $state.go('notlogin');
            // $scope.logined = false;
            // $scope.showConfirm();
            $timeout(function() {
                $rootScope.changePage('tab.user');
            }, 100);

        }
    }]);

// 模板展示页面
appController.controller('designCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$ionicSlideBoxDelegate', '$timeout', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'SectionEvent', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $ionicSlideBoxDelegate, $timeout, localStorageService, ShareService, IonicService, Con, SectionEvent) {

    var User = JSON.parse(localStorageService.get('User'));
    Con.log(User);
    // if (User) {
        //设置图片高度
        var win_w = angular.element(window)[0].innerWidth;
        $scope.img_w = win_w * 0.45 * 229 / 158 + 'px';
        $ionicLoading.show({
            content: 'Loading',
            animation: 'fade-in',
            showBackdrop: false,
            maxWidth: 200,
            showDelay: 0,
            duration: 10000
        });
        $scope.loadValue = false;
        //请求三大类别的最热数据
        IonicService.getTemplateIndex().then(function(data) {
            console.log(data);
            if (data.status == 1) {
                jQuery.each(data.data, function(k, v) {
                    if (v.name == "个人") {
                        $scope.personalTemplateArr = v;
                        console.log($scope.personalTemplateArr)
                    }
                    if (v.name == "行业") {
                        $scope.industryTemplateArr = v;
                        console.log($scope.industryTemplateArr)
                    }
                    if (v.name == "场景") {
                        $scope.sceneTemplateArr = v;
                        console.log($scope.sceneTemplateArr)
                    }

                });
                $ionicLoading.hide();
                $scope.loadValue = true;
            }
        });
    // } else {
    //     $timeout(function() {
    //         $rootScope.changePage('tab.design');
    //     }, 100);
    // }
}]);

// 模板展示详细页面
appController.controller('moreDesignCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$ionicSlideBoxDelegate', '$timeout', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'SectionEvent', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $ionicSlideBoxDelegate, $timeout, localStorageService, ShareService, IonicService, Con, SectionEvent) {
    //默认可以加载更多数据
    $scope.more = true;
    //设置图片高度
    var win_w = angular.element(window)[0].innerWidth;
    $scope.img_w = win_w * 0.45 * 229 / 158 + 'px';
    console.log($stateParams.designType)
    console.log($stateParams.main)
    $scope.dropshow = true;
    $scope.visible = false;
    $ionicLoading.show({
        content: 'Loading',
        animation: 'fade-in',
        showBackdrop: false,
        maxWidth: 200,
        showDelay: 0,
        duration: 10000
    });
    // 分类列表显示隐藏切换
    $scope.toggle = function() {
        console.log($scope.visible)
        if ($scope.visible == false) {
            console.log('关闭到打开');
            var liItemId = jQuery('.mainTypeList li.active').attr('liItemId');
            console.log(jQuery('.restList li[liItemId=' + liItemId + ']'))
            console.log(liItemId)
            jQuery('.restList li').removeClass('active');
            jQuery('.restList li[liItemId=' + liItemId + ']').addClass('active');

        } else {
            console.log('打开到关闭');
            var liItemId = jQuery('.restList li.active').attr('liItemId');
            console.log(jQuery('.restList li[liItemId=' + liItemId + ']'))
            console.log(liItemId)
            jQuery('.mainTypeList li').removeClass('active');
            jQuery('.mainTypeList li[liItemId=' + liItemId + ']').addClass('active');
            var scrollLeft1 = jQuery('.mainTypeList li[liItemId=' + liItemId + ']').offset().left - jQuery('.mainTypeList').offset().left;
            console.log('--------offset--------')
            console.log(scrollLeft1)
            jQuery('.mainTypeWrap').scrollLeft(scrollLeft1);
        }
        console.log(jQuery('.mainTypeList li.active').attr('liItemId'));


        $scope.dropshow = !$scope.dropshow;
        $scope.visible = !$scope.visible;
    }

    /* 根据分类id检索故事列表:searchItemByCategoryId
    	categoryId:分类id
    	type：区分是点的哪里的li：0为没展开的 1为展开的 2为不是通过li加载
		index:li的索引 为了同步li选中状态
		pageNo:页码
		isLoad:通过点击li加载的不传值，通过上拉加载方式的要设为true;
    */
    $scope.displayOrder = 0;
    $scope.searchItemByCategoryId = function(categoryId, type, index, pageNo, isLoad) {

        console.log('------scrollTop-----')
            // console.log(jQuery('.moreDesignPageContent .scroll').css('scrollTop'))
        console.log(index)
        if (type == '0') {
            console.log('点击了未展开的li');
            jQuery('.mainTypeList li').removeClass('active');
            jQuery('.mainTypeList li').eq(index).addClass('active');
            // this.addClass('active');
            console.log(jQuery('.mainTypeList li'));
        } else if (type == '1') {
            console.log('点击了展开后的li');
            jQuery('.restList li').removeClass('active');
            jQuery('.restList li').eq(index).addClass('active');
            // jQuery('.restList li').eq(index).clone().prependTo(jQuery('.mainTypeList'));
            // jQuery('.searchAll').hide();
            $scope.toggle();
        }


        var pageNo = pageNo || 1;
        $scope.getListInfo = {
                "category": categoryId,
                "pageNo": pageNo,
                "loadCount": '4',
                "displayOrder": $scope.displayOrder,
                "search": ''
            }
            // // console.log(this)
            // var pageNo = pageNo || 1;
            // $scope.getListInfo = {
            //         "category": categoryId,
            //         "pageNo": pageNo,
            //         "loadCount": '4',
            //         "displayOrder": 0,
            //         "search": ''
            //     }
            //     // console.log($scope.getListInfo);
        if (!isLoad) {
            // 通过按钮切换的时候才需要走这部分逻辑
            $ionicLoading.show({
                content: 'Loading',
                animation: 'fade-in',
                showBackdrop: false,
                maxWidth: 200,
                showDelay: 0,
                duration: 10000
            });
            $scope.more = true;
            $scope.mainNo = 1;
            $scope.getListInfo = {
                "category": categoryId,
                "pageNo": 1,
                "loadCount": '4',
                "displayOrder": $scope.displayOrder,
                "search": ''
            }
            IonicService.getStoryListByCategoryId($scope.getListInfo).then(function(data) {
                console.log(data)
                $ionicLoading.hide();
                if (data.status == 1 && data.message == "Success") {
                    if (pageNo == 1) {
                        $scope.storyList = data.tempates;
                    } else {
                        angular.forEach(data.tempates, function(item) {
                            $scope.storyList.push(item);
                        });
                    }
                } else {
                    $scope.storyList = [];
                }
            });
            jQuery('.scroll-bar-indicator').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
            jQuery('.moreDesignPageContent .scroll').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
        }
    }

    // 获取核心分类的数据方法:// 根据名字获取数据
    $scope.getMainListStory = function(sendData) {
            IonicService.getTemplateByName(sendData).then(function(data) {
                console.log(data);
                $ionicLoading.hide();
                if (data.status == 1 && data.message == "Success") {
                    $scope.storyList = data.tempates;
                }
            });
        }
        // 获取更多数据
    $scope.mainNo = 1;
    $scope.loadStoryMore = function() {
            console.log('loadmore');
            var pageNo = $scope.mainNo++
                $scope.more = true;
            try {
                if ($stateParams.main) {
                    // 假如是运营列出的几个重点分类：旅游 结婚 教育，需要走这部分逻辑
                    $scope.pageTitle = $stateParams.designType;
                    var sendData = {
                            categoryName: $stateParams.designType,
                            pageNo: pageNo,
                            loadCount: '4',
                            displayOrder: $scope.displayOrder
                        }
                        // 把分类列表隐藏
                    $scope.typeBoxIsHide = true;
                    console.log(sendData)
                    IonicService.getTemplateByName(sendData).then(function(data) {
                        console.log(data.tempates);
                        $ionicLoading.hide();
                        if (angular.equals(data.tempates, undefined)) {
                            $scope.more = false;
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        }
                        if (data.status == 1 && data.message == "Success") {
                            if (pageNo == 1) {
                                $scope.storyList = data.tempates;
                            } else {
                                angular.forEach(data.tempates, function(item) {
                                    $scope.storyList.push(item);
                                });
                            }
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        }
                    });

                } else {
                    console.log('不是推荐的几个分类')
                        //不是推荐的几个分类的时候，需要把对应的子分类列表显示出来
                    $scope.typeBoxIsHide = false;
                    if (!$scope.getListInfo) {
                        //第一次加载才load分类列表，第二次就不重新加载
                        var parentInfo = {
                            parentId: $stateParams.designType
                        }
                        var ul_width = 0;
                        IonicService.getChildCategoryByParentId(parentInfo).then(function(data) {
                            // if (angular.equals(data.tempates, 'undefined')) {
                            // 	alert('ok')
                            //     $scope.more = false;
                            //     $scope.$broadcast('scroll.infiniteScrollComplete');
                            // }
                            console.log('--------------data------------')
                            console.log(data)
                            if (data.status == 1 && data.message == "Success") {
                                ul_width = 0;
                                console.log(data.categories)
                                $scope.categories = data.categories;
                                $ionicLoading.hide();
                                $timeout(function() {
                                    jQuery.each(jQuery('.mainTypeList li'), function(k, v) {
                                        ul_width += jQuery(v).outerWidth(true);
                                    });
                                    ul_width = ul_width + 10
                                    jQuery('.mainTypeList').css({
                                        width: ul_width + 'px'
                                    })
                                })

                            }
                        });
                        console.log('--------getListInfo------')
                        console.log($scope.getListInfo)

                        // 默认加载全部类别的故事
                        $scope.searchItemByCategoryId(0, 0, 0, pageNo, true);

                    } else {
                        $scope.searchItemByCategoryId($scope.getListInfo.category, 2, 0, pageNo, true);
                    }

                    // console.log(this)
                    // console.log($scope.getListInfo
                    IonicService.getStoryListByCategoryId($scope.getListInfo).then(function(data) {
                        $ionicLoading.hide();
                        console.log('-------data.tempates------');
                        console.log(data.tempates);
                        if (angular.equals(data.tempates, undefined)) {
                            $scope.more = false;
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        }
                        if (data.status == 1 && data.message == "Success") {
                            if (pageNo == 1) {
                                $scope.storyList = data.tempates;
                            } else {
                                angular.forEach(data.tempates, function(item) {
                                    $scope.storyList.push(item);
                                });
                            }
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                        }

                    });
                    // $scope.$broadcast('scroll.infiniteScrollComplete');

                }
            } catch (ex) {
                $scope.more = false;
            }
        }
        // 下拉刷新
    $scope.doRefresh = function() {
        $timeout(function() {
            $scope.$broadcast('scroll.infiniteScrollComplete');
        }, 500)
    };

    $scope.hottest = function() {
        jQuery('.latestandhottest').removeClass('active');
        jQuery('.latestandhottest').eq(0).addClass('active');
        jQuery('.scroll-bar-indicator').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
        jQuery('.moreDesignPageContent .scroll').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
        $scope.displayOrder = 0;
        $scope.getListInfo.pageNo = 1;
        $scope.loadStoryMore();
        IonicService.getStoryListByCategoryId($scope.getListInfo).then(function(data) {
            $ionicLoading.hide();
            console.log('-------data.tempates------');
            console.log(data.tempates);
            if (angular.equals(data.tempates, undefined)) {
                $scope.more = false;
                $scope.$broadcast('scroll.infiniteScrollComplete');
            }
            if (data.status == 1 && data.message == "Success") {
                $scope.storyList = data.tempates;
                $scope.$broadcast('scroll.infiniteScrollComplete');
            }

        });
    }
    $scope.newest = function() {
        jQuery('.latestandhottest').removeClass('active');
        jQuery('.latestandhottest').eq(1).addClass('active');
        jQuery('.scroll-bar-indicator').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
        jQuery('.moreDesignPageContent .scroll').css({ transform: 'translate3d(0px, 0px, 0px) scale(1)' });
        $scope.displayOrder = 1;
        $scope.getListInfo.pageNo = 1;
        $scope.loadStoryMore();
        IonicService.getStoryListByCategoryId($scope.getListInfo).then(function(data) {
            $ionicLoading.hide();
            console.log('-------data.tempates------');
            console.log(data.tempates);
            if (angular.equals(data.tempates, undefined)) {
                $scope.more = false;
                $scope.$broadcast('scroll.infiniteScrollComplete');
            }
            if (data.status == 1 && data.message == "Success") {
                $scope.storyList = data.tempates;
                $scope.$broadcast('scroll.infiniteScrollComplete');
            }

        });
    }
}]);

// 模板使用页面
appController.controller('designDetailCtrl', ['$scope', '$rootScope', '$sce', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicPopover', '$ionicPopup', '$timeout', '$state', 'localStorageService', 'ShareService', 'IonicService', 'MsgBox', 'WechatApi', 'Con', function($scope, $rootScope, $sce, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicPopover, $ionicPopup, $timeout,
    $state, localStorageService, ShareService, IonicService, MsgBox, WechatApi, Con) {
    // $rootScope.menuShow = true;
    // $rootScope.backShow = true;
    // Con.log($stateParams);
    Con.log('首页详情');
    // console.log($stateParams);
    // 用ifarme展示
    // console.log(User);
    $scope.urlParams = JSON.parse($stateParams.itemPars);
    // console.log($scope.urlParams)

    // var url =$stateParams.puburl;
    // console.log(url);
    // iframe需要sce转化之后才可以打开
    $scope.pubUrl = $sce.trustAsResourceUrl($scope.urlParams.puburl);
    $scope.storyTit = $scope.urlParams.title;
    $scope.templateId = $scope.urlParams.id;
    console.log($scope.urlParams)

    $scope.createStoryByTemplateId = function(templateId) {
    var User = JSON.parse(localStorageService.get('User'));
        if (User) {
            User = JSON.parse(localStorageService.get('User'));
            var createStoryInfo = {
                templateID: templateId,
                userId: User.id,
                userToken: User.token,
                device: 'h5'
            }
            $ionicLoading.show({
                content: 'Loading',
                animation: 'fade-in',
                showBackdrop: false,
                maxWidth: 200,
                showDelay: 0,
                duration: 10000
            });
            IonicService.createStoryByTemplateId(createStoryInfo).then(function(data) {
                $ionicLoading.hide();
                if (data.status == 1 && data.message == 'success') {
                    $state.go('tab.edit', { storyId: data.storyId });
                } else {
                    localStorageService.remove('User');
                    MsgBox.showTexts('未登录');
                    $rootScope.openLoginModal();
                }
            })
        } else {
            $timeout(function() {
                // 把当前连接保存，以便登陆后可以重新回到该地址
                $rootScope.changeState = window.location.href;
                $rootScope.openLoginModal();
            }, 100);
        }
    }
}]);

// 模板使用页面
appController.controller('previewStoryCtrl', ['$scope', '$rootScope', '$sce', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicPopover', '$ionicPopup', '$timeout', '$state', 'localStorageService', 'ShareService', 'IonicService', 'MsgBox', 'WechatApi', 'Con', function($scope, $rootScope, $sce, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicPopover, $ionicPopup, $timeout,
    $state, localStorageService, ShareService, IonicService, MsgBox, WechatApi, Con) {
    // $rootScope.menuShow = true;
    // $rootScope.backShow = true;
    // Con.log($stateParams);
    Con.log('预览页面');
    // console.log($stateParams);
    // 用ifarme展示

    $scope.urlParams = JSON.parse($stateParams.storyInfo);
    console.log($scope.urlParams)

    // var url =$stateParams.puburl;
    // console.log(url);
    // iframe需要sce转化之后才可以打开
    $scope.pubUrl = $sce.trustAsResourceUrl($scope.urlParams.puburl);
    $scope.storyTit = $scope.urlParams.title;
    // $scope.templateId = $scope.urlParams.id;
    console.log($scope.urlParams.puburl)

    $scope.changeStoryInfo = function(storyInfo) {
        
        $scope.storyInfo = JSON.stringify(storyInfo);
        console.log(storyInfo);
        // 跳转到设置页面
        $state.go('tab.setStoryInfo', { storyInfo: $scope.storyInfo });
        // var createStoryInfo = {
        //     templateID: templateId,
        //     userId: User.id,
        //     userToken: User.token,
        //     device: 'h5'
        // }
        // $ionicLoading.show({
        //     content: 'Loading',
        //     animation: 'fade-in',
        //     showBackdrop: false,
        //     maxWidth: 200,
        //     showDelay: 0,
        //     duration: 10000
        // });
        // IonicService.createStoryByTemplateId(createStoryInfo).then(function(data) {
        //     $ionicLoading.hide();
        //     if (data.status == 1 && data.message == 'success') {
        //         $state.go('tab.edit', { storyId: data.storyId })
        //     }
        // })
    }
}]);

// 设计器
appController.controller('setStoryInfoCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$ionicSlideBoxDelegate', '$timeout', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'SectionEvent', 'MsgBox', 'Gallery', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $ionicSlideBoxDelegate, $timeout, localStorageService, ShareService, IonicService, Con, SectionEvent, MsgBox, Gallery) {
    // Con.log($stateParams.storyId)
    $rootScope.hideTabs = false;
    $scope.urlParams = JSON.parse($stateParams.storyInfo);
    console.log($scope.urlParams)
    $scope.logo = $scope.urlParams.logo;
    $scope.storyTit = $scope.urlParams.title;
    $scope.storyDescription = $scope.urlParams.description;
    $scope.storyId = $scope.urlParams.storyId;
    $scope.storycategory = '';
    $scope.storycategory = $scope.urlParams.storycategory;
    var User = JSON.parse(localStorageService.get('User'));
    console.log(User);
    if (User) {
        // 后退历史
        $scope.goBackView = function() {
            console.log($ionicHistory.viewHistory().backView)
            if ($ionicHistory.viewHistory().backView) {
                // $ionicGoBack()
                $ionicHistory.goBack();
            } else {
                $rootScope.changePage('tab.home');
            };
            // stateName
            // $ionicGoBack()
        }

        // $scope.test = function(){
        //     alert('ok')
        // }
        // 加载文字修改模态框
        $ionicModal.fromTemplateUrl('templates/textedit.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function(modal) {
            $scope.textEditmodal = modal;
        });
        $scope.model = { text: 123 };
        $scope.editType = null;
        $scope.openTextEditModal = function(type) {
            $scope.textEditmodal.show();
            $scope.editType = type;
            var oldText = null;
            if (type == 'title') {
                oldText = jQuery('.storyTitleContent').text();
            } else if (type == 'description') {
                oldText = jQuery('.storyDescriptionContent').text();
            }
            console.log(oldText);
            $scope.model = { text: oldText };
            // jQuery('.editTextArea').focus();
        };
        $scope.closeTextEditModal = function(type) {
            $scope.textEditmodal.hide();
        };
        $scope.changeText = function(text) {
            // jQuery('.mobileEvent').find('.txt-con').text(text);
            if ($scope.editType == 'title') {
                jQuery('.storyTitleContent').text(text);
                $scope.urlParams.title=text;
            } else if ($scope.editType == 'description') {
                jQuery('.storyDescriptionContent').text(text);
                $scope.urlParams.description=text;
            }
            
            $scope.textEditmodal.hide();
        };
        // 调用图片model设置封面图片
        $scope.gallery = Gallery.initGalleryModal($scope);
        $scope.normalGalleryChoose = function(imageurl) {
            jQuery('.storyLogo').attr("src", imageurl);
            // 这个数据需要改，传到下一个页面返回的时候需要用到
            $scope.urlParams.logo=imageurl;
        }
        $scope.openSetCoverImgModal = function() {
            $scope.openGalleryModal($scope.normalGalleryChoose, true);
        };
        $scope.closeSetCoverImgModal = function() {
            $scope.closeGalleryModal();
        };
        //保存故事信息方法
        $scope.saveStoryInfo = function() {
            var categoriesSpan = jQuery('.storyCategoryContent span');
            // console.log(categories);
            var categoryIdArr = [];
            var categoryIdsString = '';
            console.log(categoriesSpan)
            jQuery.each(categoriesSpan, function(k, v) {
                categoryIdArr.push(jQuery(v).attr('id'));
            });
            categoryIdsString = categoryIdArr.toString();
            console.log(categoryIdsString);
            var storyInfo = {
                logo: jQuery('.storyLogo').attr('src'),
                title: jQuery('.storyTitleContent').text(),
                description: jQuery('.storyDescriptionContent').text(),
                storyId: $scope.storyId,
                userToken: User.token,
                userId: User.id,
                categoryIds:categoryIdsString
            }
            if(!storyInfo.title){
                MsgBox.showTexts('标题不能为空');
                return false;
            }
            if(!storyInfo.categoryIds){
                MsgBox.showTexts('类型不能为空');
                return false;
            }
            console.log(storyInfo);
            IonicService.setStoryInfo(storyInfo).then(function(data) {
                console.log(data);
                if(data.status=="1" && data.message == "success"){
                   console.log(data); 
                   $state.go('tab.user');
                }
            })
        }


        //分类信息
        // $scope.categories = JSON.parse($scope.urlParams.storycategories);
        // console.log($scope.categories)
        // 选择分类方法

        var storyCategory = JSON.stringify($scope.urlParams.storycategory);
        console.log(storyCategory)
        $scope.setStoryCategories = function() {
            // var storyCategories ={
            //         activeCategory:storyCategory,
            //         allCategories:$scope.urlParams.storycategories
            //     }
            //     console.log(storyCategories)
                $scope.newUrlParams = JSON.stringify($scope.urlParams);
            // console.log(storyInfo);
            // 跳转到分类选择页面
            $state.go('tab.setStoryCategories', { storyInfo: $scope.newUrlParams });
        }
    } else {
        $timeout(function() {
            $rootScope.changePage('tab.home');
        }, 100);
    }
}]);

// 模板使用页面
appController.controller('setStoryCategoriesCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$ionicSlideBoxDelegate', '$timeout', '$filter', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'SectionEvent', 'MsgBox', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $ionicSlideBoxDelegate, $timeout, $filter, localStorageService, ShareService, IonicService, Con, SectionEvent, MsgBox) {
    // $rootScope.menuShow = true;
    // $rootScope.backShow = true;
    // Con.log($stateParams);
    Con.log('预览页面');
    // console.log($stateParams);
    // 用ifarme展示

    $scope.urlParams = JSON.parse($stateParams.storyInfo);
    console.log($scope.urlParams);

    // 三大类类别集合
    $scope.allCategories = JSON.parse($scope.urlParams.storycategories);
    // 品牌故事
    $scope.brandStoryCategories = null;
    $scope.brandStoryCategories = $filter('filter')($scope.allCategories, { "name": "品牌故事" })[0].categories;
    console.log($scope.brandStoryCategories);
    // 热点新闻
    $scope.hotNewsCategories = null;
    $scope.hotNewsCategories = $filter('filter')($scope.allCategories, { "name": "热点新闻" })[0].categories;
    console.log($scope.hotNewsCategories);
    // 生活故事
    $scope.lifeStoryCategories = null;
    $scope.lifeStoryCategories = $filter('filter')($scope.allCategories, { "name": "生活故事" })[0].categories;
    console.log($scope.lifeStoryCategories);
    //选中的类型数组
    $scope.activeCategories = $scope.urlParams.storycategory;
    console.log($scope.activeCategories);
    jQuery.each($scope.activeCategories, function(k, v) {
        $timeout(function() {
            jQuery('.categoriesWrap li[id=' + v.id + ']').addClass('active');
        })
    });
    // 后退历史
    $scope.goBackView = function() {
       var storyInfo = JSON.stringify($scope.urlParams);
        // 跳转到设置页面
        $state.go('tab.setStoryInfo', { storyInfo: storyInfo });
    }

    $scope.toggleClick = function(id) {
            var thisJqObj = jQuery('.categoriesWrap li[id=' + id + ']');
            var selectedLen = thisJqObj.parents('.categoriesWrap').find('li.active').length;
            console.log(thisJqObj.parents('.categoriesWrap').find('li.active'))
            console.log(selectedLen)
            if (thisJqObj.hasClass('active')) {
                thisJqObj.removeClass('active');
            } else {
                if (selectedLen >= 3) {
                    MsgBox.showTexts('每个类型最多只能选3个标签！')
                } else {
                    thisJqObj.addClass('active');
                }
            }
        }
        // $scope.storycategories = JSON.parse($scope.urlParams.storycategories);
        // console.log($scope.storycategories)
    $scope.setCategory = function() {
        var categories = jQuery('.categoriesWrap li.active');
        // console.log(categories);
        var storyCategoryArr = [];
        console.log(categories)
        jQuery.each(categories, function(k, v) {
            var storyCategory = {id:jQuery(v).attr('id'),name:jQuery(v).text()};
            storyCategoryArr.push(storyCategory);
        });
        // console.log(storyCategoryArr)
        // var idStrings = idArr.toString();
        $scope.urlParams.storycategory=storyCategoryArr;
        // console.log($scope.urlParams);
        var storyInfo = JSON.stringify($scope.urlParams);
        // 跳转到设置页面
        $state.go('tab.setStoryInfo', { storyInfo: storyInfo });
        // $scope.storyInfo = {
        //     puburl: $scope.urlParams.puburl,
        //     storyId: $scope.urlParams.storyId,
        //     title: $scope.urlParams.title,
        //     description: $scope.urlParams.description,
        //     logo: $scope.urlParams.logo,
        //     storycategory: data.storycategory,
        //     storycategories: $scope.urlParams.storycategories
        // }
    }
}]);

// 设计器
appController.controller('editCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$ionicSlideBoxDelegate', '$timeout', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'SectionEvent', 'MsgBox', 'Gallery', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $ionicSlideBoxDelegate, $timeout, localStorageService, ShareService, IonicService, Con, SectionEvent, MsgBox, Gallery) {
    // Con.log($stateParams.storyId);
    var storyId = $stateParams.storyId;
    $scope.gallery = Gallery.initGalleryModal($scope);
    // 默认一进来是透明
    $scope.opacity = 0;
    $ionicSlideBoxDelegate.$getByHandle('sectionBox').enableSlide(false);
    $ionicLoading.show({
        content: 'Loading',
        animation: 'fade-in',
        showBackdrop: false,
        maxWidth: 200,
        showDelay: 0,
        duration: 10000
    });
    IonicService.postStoryData({ "storyId": storyId }).then(function(data) {
        console.log(data);

        if (data.status == '0') {
            MsgBox.showTexts('该app不存在');
            $ionicLoading.hide();
        } else if (data.message == "Success") {
            $scope.pages = data.pages;

            $scope.resetPage();

        }

    });
    //更新数据之后重置页面
    $scope.resetPage = function() {
            $timeout(function() {
                $ionicSlideBoxDelegate.$getByHandle('sectionBox').update();
                var win_w = angular.element(window)[0].innerWidth;
                Con.log(win_w);
                var ionSlideH = jQuery('.storySlideBox .slider-slide')[0].clientHeight;
                Con.log(ionSlideH);
                var storyBoxW = win_w * 0.9;
                var storyBoxH = ionSlideH * 0.9;
                var storyBoxLeft = (win_w - 320) / 2;
                var storyBoxTop = (ionSlideH - 504) / 2;
                var storyBoxSectionScaleX = storyBoxW / 320;
                var storyBoxSectionScaleY = storyBoxH / 504;
                var scale = storyBoxSectionScaleX > storyBoxSectionScaleY ? storyBoxSectionScaleY : storyBoxSectionScaleX;
                Con.log('scale' + scale);
                Con.log(storyBoxSectionScaleX);
                Con.log(storyBoxSectionScaleY);
                jQuery('.storyPage').css({
                    transform: 'scale(' + scale + ')',
                    left: storyBoxLeft,
                    top: storyBoxTop
                });
                //不把contenteditable属性设置成false,点文字会弹出键盘
                jQuery('.bf-com-impl.txt').attr('contenteditable', false);
                // 初始化艺术字
                $scope.setWordart();
                SectionEvent.cli($scope);
                SectionEvent.blurFn($scope);
                // 当加载完之后要显示出来
                $scope.opacity = 1;
                $timeout(function() {
                    $ionicLoading.hide();
                }, 500);

            }, 50);
        }
        // 切换按钮
    $scope.visible = false;
    $scope.toggle = function() {
        $scope.visible = !$scope.visible;
    };
    // 删除元素
    $scope.delElement = function() {
        $scope.virtualSave();
        jQuery('.mobileEvent').remove();
        jQuery('.editBox').hide();
        $('.rightbottomcopy,.leftbottomcopy,.lefttopcopy,.righttopcopy').hide();
    };
    //上一层
    $scope.upElement = function() {
        $scope.virtualSave();
        var oldZIndex1 = parseInt(jQuery('.mobileEvent').css('zIndex')) || 0;
        var newZIndex1 = oldZIndex1 + 1;
        // console.log(oldZIndex.css('zIndex'));
        jQuery('.mobileEvent').css({
            zIndex: newZIndex1
        });
    };
    // 下一层
    $scope.downElement = function() {
        $scope.virtualSave();
        var oldZIndex2 = jQuery('.mobileEvent').css('zIndex');
        var newZIndex2 = (oldZIndex2 - 1) > 0 ? (oldZIndex2 - 1) : 0;
        // console.log(oldZIndex.css('zIndex'));
        jQuery('.mobileEvent').css({
            zIndex: newZIndex2
        });
    };
    // 复制元素
    $scope.copyElement = function() {
        $scope.virtualSave();
        var cloneElem = jQuery('.mobileEvent').clone();
        cloneElem.css({
            border: ''
        }).removeClass('mobileEvent');
        cloneElem.find('.leftright,.topbottom,.rightbottom,.righttop').remove();
        cloneElem.prependTo(jQuery('.mobileEvent').parents('output'));
    };
    // 存放遍历每个页面的信息
    $scope.pageData = [];
    // 用来存放把遍历后的数组转为字符串，以便传输
    $scope.stringData = null;

    //保存h5的方法：
    $scope.storySave = function() {

        $ionicLoading.show({
            content: 'Loading',
            animation: 'fade-in',
            showBackdrop: false,
            maxWidth: 200,
            showDelay: 0,
            duration: 10000
        });
        // var data = {
        //         "storyId": storyId,
        //         "storyData": [],
        //         // "userId":'123',
        //         // "userToken":'3333',

        //     }
        // 保存之前先把选中状态清除
        // SectionEvent.cancelblurFn();

        // 遍历页面信息
        $scope.eachData();
        console.log($scope.stringData);
        IonicService.saveStoryData($scope.stringData).then(function(data) {
            $ionicLoading.hide();
            console.log(data);

            if (data.status == '1') {
                MsgBox.showTexts('保存成功');

                var storycategories = JSON.stringify(data.storycategories);
                $scope.storyInfo = {
                        puburl: data.puburl,
                        storyId: data.storyId,
                        title: data.title,
                        description: data.description,
                        logo: data.logo,
                        storycategory: data.storycategory,
                        storycategories: storycategories
                    }
                    // $scope.storyInfo = {
                    //     puburl: 'http://test.upalapp.com/p/template/qUjaA3.html',
                    //     storyId: '22115',
                    //     title: '模拟标题',
                    //     description: '模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述模拟描述',
                    //     logo: 'http://cdn.upalapp.com/upload/images/2016/08/thumb/1472179734159_d0426ff4-bdb9-4f51-b0ec-caf47ca07f76.png',
                    // }
                console.log($scope.storyInfo);
                $scope.storyInfo = JSON.stringify($scope.storyInfo);
                // 跳转到预览界面
                $state.go('tab.previewStory', { storyInfo: $scope.storyInfo });
            }
        });
    };
    // 遍历数据的方法
    $scope.eachData = function() {
            $scope.pageData = [];
            jQuery('.editSlide .storyPage output').each(function(k, v) {
                var idval = jQuery(v).parents('.storyPage').attr('page_id');
                var numval = k + 1;
                // console.log(v)
                var contenthtml = jQuery(v).prop('outerHTML').toString();
                // Con.log(contenthtml);
                var pageInfo = {
                    "storyId": storyId,
                    "id": idval,
                    "number": numval.toString(),
                    "content": contenthtml
                };
                // console.log($scope.pageData)
                $scope.pageData.push(pageInfo);
            });
            // console.log(data)

            $scope.stringData = JSON.stringify($scope.pageData);
        }
        //用来保存每一步操作的数据，以便撤销操作
    $scope.cancelData = [];

    // 虚拟保存
    $scope.virtualSave = function() {
            $scope.eachData();
            $scope.cancelData.push($scope.pageData);
            console.log($scope.cancelData);
        }
        // 撤销操作
    $scope.cancelOperation = function() {
        var previousStepData = $scope.cancelData.pop();
        console.log(previousStepData);
        // 假如存在上一步操作就返回上一步操作
        if (previousStepData) {
            $scope.pages = previousStepData;
            $scope.resetPage();
        }

    }

    // 后退历史
    $scope.goBackView = function() {
        console.log($ionicHistory.viewHistory().backView)
        if ($ionicHistory.viewHistory().backView) {
            // $ionicGoBack()
            $ionicHistory.goBack();
        } else {
            $rootScope.changePage('tab.home');
        };
        // stateName
        // $ionicGoBack()
    }

    // 加载文字修改模态框
    $ionicModal.fromTemplateUrl('templates/textedit.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.textEditmodal = modal;
    });
    $scope.model = { text: 123 };
    $scope.openTextEditModal = function() {
        $scope.textEditmodal.show();
        var oldText = jQuery('.mobileEvent').find('.txt-con').text();
        $scope.model = { text: oldText };
        jQuery('.editTextArea').focus();
    };
    $scope.closeTextEditModal = function(type) {
        $scope.textEditmodal.hide();
    };
    $scope.changeText = function(text) {
        jQuery('.mobileEvent').find('.txt-con').text(text);
        $scope.textEditmodal.hide();
    };

    $scope.normalGalleryChoose = function(imageurl) {
        jQuery('.mobileEvent').find('img').attr("src", imageurl);
        SectionEvent.start();
    }
    $scope.backGalleryChoose = function(imageurl) {
        jQuery('.bgbox').each(function() {
            var data = $(this).parents("ion-slide").attr("data-index");
            var nowIndex = $ionicSlideBoxDelegate.currentIndex();
            if (data == nowIndex) {
                $(this).css("background", "url(" + imageurl + ")  no-repeat 50% 50%");
            }
        })
        SectionEvent.start();
    }

    $rootScope.openImgEditModal = function() {
        SectionEvent.stop();
        $scope.openGalleryModal($scope.normalGalleryChoose);
    };

    $rootScope.openBackEditModal = function() {
        SectionEvent.stop();
        $scope.openGalleryModal($scope.backGalleryChoose);
    }


    /**
     *文字样式字体字号字色对齐方式编辑栏部分
     **/
    // 默认隐藏修改文字样式编辑栏
    $scope.textEditHide = false;
    // 第三级别：文字样式编辑栏
    $scope.textStyleEditShow = false;
    // 打开文字样式设置栏并且保存并设置初始值
    $scope.textStyleEditShowFn = function() {
        SectionEvent.stop();
        $scope.textStyleEditShow = true;
        $scope.fontWeightVal = jQuery('.mobileEvent').css('fontWeight');
        $scope.fontStyleVal = jQuery('.mobileEvent').css('fontStyle');
        $scope.textDecorationVal = jQuery('.mobileEvent').css('textDecoration');
        if ($scope.fontWeightVal == 'bold' || $scope.fontWeightVal == 'bolder') {
            jQuery('.setfontWeightBtn').addClass('active');
        } else {
            jQuery('.setfontWeightBtn').removeClass('active');
        }
        console.log($scope.fontStyleVal)
        if ($scope.fontStyleVal == 'italic') {
            console.log('有斜体')
            jQuery('.setFontStyleBtn').addClass('active');
        } else {
            jQuery('.setFontStyleBtn').removeClass('active');
        }
        if ($scope.textDecorationVal == 'underline') {
            jQuery('.setTextDecorationBtn').addClass('active');
        } else {
            jQuery('.setTextDecorationBtn').removeClass('active');
        }
    }

    // 设置文字粗细
    $scope.setFontWeightFn = function() {
            if (jQuery('.setfontWeightBtn').hasClass('active')) {
                jQuery('.setfontWeightBtn').removeClass('active');
                jQuery('.mobileEvent').css({
                    'fontWeight': 'normal',
                });
            } else {
                jQuery('.setfontWeightBtn').addClass('active');
                jQuery('.mobileEvent').css({
                    'fontWeight': 'bold',
                });
            }
        }
        // 设置斜体
    $scope.setFontStyleFn = function() {
            if (jQuery('.setFontStyleBtn').hasClass('active')) {
                jQuery('.setFontStyleBtn').removeClass('active');
                jQuery('.mobileEvent').css({
                    'fontStyle': 'normal',
                });
            } else {
                jQuery('.setFontStyleBtn').addClass('active');
                jQuery('.mobileEvent').css({
                    'fontStyle': 'italic',
                });
            }
        }
        // 设置文字下划线
    $scope.setTextDecorationFn = function() {
            if (jQuery('.setTextDecorationBtn').hasClass('active')) {
                jQuery('.setTextDecorationBtn').removeClass('active');
                jQuery('.mobileEvent').css({
                    'textDecoration': 'none',
                });
            } else {
                jQuery('.setTextDecorationBtn').addClass('active');
                jQuery('.mobileEvent').css({
                    'textDecoration': 'underline',
                });
            }
        }
        // 取消设置并恢复默认值
    $scope.textStyleCancelFn = function() {
            SectionEvent.start();
            $scope.textStyleEditShow = false;
            jQuery('.mobileEvent').css({
                'fontWeight': $scope.fontWeightVal,
                'fontStyle': $scope.fontStyleVal,
                'textDecoration': $scope.textDecorationVal,
            })
        }
        // 确认修改
    $scope.textStyleSureFn = function() {
        SectionEvent.start();
        $scope.textStyleEditShow = false;
    }

    /**
     * 获取api的domain
     * @author zhengxinren
     */
    $scope.getApiDoMain = function() {
            var href = document.location.href;
            if (href.indexOf('www.upalapp.com') != -1 || href.indexOf('beta.upalapp.com') != -1 || href.indexOf('h.upalapp.com') != -1) {
                return 'http://api.upalapp.com';
            } else {
                return 'http://testapi.upalapp.com';
            }
        }
        /*设置艺术字体*/

    $scope.setWordart = function() {
            /* 艺术字 */
            var family = [];
            var texts = [];

            jQuery(".bf-com[_comid=txt][family]").each(function() {
                var f = jQuery(this).attr('family');
                var text = jQuery(this).text();
                if (family.indexOf(f) >= 0) {
                    texts[family.indexOf(f)] += text;
                } else {
                    family.push(f);
                    texts.push(text);
                }
            });

            for (var i = 0; i < texts.length; i++) {
                var strArr = texts[i].split("");
                //排序
                strArr.sort();
                var result = jQuery.unique(strArr);
                texts[i] = result.join("");
                jQuery.ajax({
                    url: $scope.getApiDoMain() + '/artFontApi/createArtFont',
                    //url:'/api/artFontApi/createArtFont',
                    type: 'post',
                    data: {
                        str: texts[i],
                        fontName: family[i]
                    },
                    before: function() {
                        console.log('-------------------------------------before------------------')
                        console.log(texts[i]);
                        console.log(family[i]);
                    },
                    success: function(result) { //ttf
                        result = JSON.parse(result);
                        console.log('----------familyresult---------------');
                        console.log(result);
                        jQuery("body").append("<style>@font-face{font-family:'" + result.fontType + "';src:url('" + result.ttfCdnUrl + "') format('truetype'), url('" + result.eotCdnUrl + "'), url('" + result.woffCdnUrl + "') format('woff');}</style>")
                            //jQuery("body").append("<style>@font-face{font-family:'"+ result.fontType +"';src:url('"+ result.ttfWebPath +"') format('truetype'), url('"+result.eotWebPath+"'), url('"+result.woffWebPath+"') format('woff');}</style>")
                    },
                    error: function() {
                        console.log('生成艺术字库失败！');
                    }
                });
            }
        }
        // $scope.setWordart = function() {
        //     /* 艺术字 */
        //     var family = [];
        //     var texts = [];

    //     jQuery(".bf-com[_comid=txt][family]").each(function() {
    //         var text = jQuery(this).text();
    //         if (family.indexOf(f) < 0) {
    //             family.push(f);
    //         }
    //         texts.push(text);
    //     });

    //     for (var i = 0; i < texts.length; i++) {
    //         var strArr = texts[i].split("");
    //         //排序
    //         strArr.sort();
    //         var result = jQuery.unique(strArr);
    //         texts[i] = result.join("");
    //         jQuery.ajax({
    //             url: $scope.getApiDoMain() + '/artFontApi/createArtFont',
    //             //url:'/api/artFontApi/createArtFont',
    //             type: 'post',
    //             data: {
    //                 str: texts[i],
    //                 fontName: family[i]
    //             },
    //             success: function(result) { //ttf
    //                 result = JSON.parse(result);
    //                 jQuery("body").append("<style>@font-face{font-family:'" + result.fontType + "';src:url('" + result.ttfCdnUrl + "') format('truetype'), url('" + result.eotCdnUrl + "'), url('" + result.woffCdnUrl + "') format('woff');}</style>")
    //                     //jQuery("body").append("<style>@font-face{font-family:'"+ result.fontType +"';src:url('"+ result.ttfWebPath +"') format('truetype'), url('"+result.eotWebPath+"'), url('"+result.woffWebPath+"') format('woff');}</style>")
    //             },
    //             error: function() {
    //                 console.log('生成艺术字库失败！');
    //             }
    //         });
    //     }
    // }
    $scope.updateWordart = function() {
            /* 更新艺术字 */
            var family = [];
            var texts = [];

            jQuery(".mobileEvent.bf-com[_comid=txt][family]").each(function() {
                var f = jQuery(this).attr('family');
                var text = jQuery(this).text();
                if (family.indexOf(f) >= 0) {
                    texts[family.indexOf(f)] += text;
                } else {
                    family.push(f);
                    texts.push(text);
                }
            });

            for (var i = 0; i < texts.length; i++) {
                var strArr = texts[i].split("");
                //排序
                strArr.sort();
                var result = jQuery.unique(strArr);
                texts[i] = result.join("");
                jQuery.ajax({
                    url: $scope.getApiDoMain() + '/artFontApi/createArtFont',
                    //url:'/api/artFontApi/createArtFont',
                    type: 'post',
                    data: {
                        str: texts[i],
                        fontName: family[i]
                    },
                    success: function(result) { //ttf
                        result = JSON.parse(result);
                        jQuery("body").append("<style>@font-face{font-family:'" + result.fontType + "';src:url('" + result.ttfCdnUrl + "') format('truetype'), url('" + result.eotCdnUrl + "'), url('" + result.woffCdnUrl + "') format('woff');}</style>")
                            //jQuery("body").append("<style>@font-face{font-family:'"+ result.fontType +"';src:url('"+ result.ttfWebPath +"') format('truetype'), url('"+result.eotWebPath+"'), url('"+result.woffWebPath+"') format('woff');}</style>")
                    },
                    error: function() {
                        console.log('生成艺术字库失败！');
                    }
                });
            }
        }
        /**
         *字体编辑
         **/
        // 默认不显示字体选择框
    $scope.fontFamilyEditShow = false;
    // 点击字体时候设置框弹出的方法
    $scope.fontFamilyEditShowFn = function() {
            SectionEvent.stop();
            $scope.fontFamilyEditShow = true;
            $scope.fontFamilyVal = jQuery('.mobileEvent').css('fontFamily');
            $scope.attrFamily = jQuery('.mobileEvent').attr('family');
            console.log($scope.fontFamilyVal);
            console.log($scope.attrFamily);
            if (!$scope.attrFamily) {
                console.log('为默认');
                $scope.fontFamilySelVal = 'YaHei';
            } else {
                $scope.fontFamilySelVal = $scope.attrFamily;
            }
            // 
        }
        // 当字体设置select值改变的时候，更新字体大小
    jQuery('.fontFamilySel').on('change', function() {

        $timeout(function() {
            jQuery('.mobileEvent').css({
                'fontFamily': $scope.fontFamilySelVal,
            });
            jQuery('.mobileEvent').attr("family", $scope.fontFamilySelVal);
            $scope.updateWordart();
        })
    });

    // $scope.fontFamilyChange = function(){
    //     console.log('change')
    // }
    $scope.fontFamilyCancelFn = function() {
            SectionEvent.start();
            jQuery('.mobileEvent').css({
                'fontFamily': $scope.fontFamilyVal,
            });
            jQuery('.mobileEvent').attr("family", $scope.attrFamily);
            $scope.fontFamilyEditShow = false;
        }
        // 确认修改
    $scope.fontFamilySureFn = function() {
        SectionEvent.start();
        $scope.fontFamilyEditShow = false;
    }
    console.log("-------fontFamilySel-----------")
    console.log(jQuery('.fontFamilySel'))

    /**
     *字体大小编辑
     **/
    // 默认不显示编辑框
    $scope.fontSizeEditShow = false;
    $scope.fontSizeEditShowFn = function() {
        SectionEvent.stop();
        $scope.fontSizeEditShow = true;
        $scope.fontSizeVal = jQuery('.mobileEvent').css('fontSize');
        console.log($scope.fontSizeVal);
        $scope.fontSizeSelVal = $scope.fontSizeVal;
    }

    $scope.fontSizeCancelFn = function() {
            SectionEvent.start();
            jQuery('.mobileEvent').css({
                'fontSize': $scope.fontSizeVal,
            });
            $scope.fontSizeEditShow = false;
        }
        // 确认修改
    $scope.fontSizeSureFn = function() {
            SectionEvent.start();
            $scope.fontSizeEditShow = false;
        }
        // 当select值改变的时候，更新字体大小
    jQuery('.fontSizeSel').on('change', function() {
        $timeout(function() {
            jQuery('.mobileEvent').css({
                'fontSize': $scope.fontSizeSelVal,
            });
        })
    });
    /**
     *字体颜色部分
     **/
    $scope.colorArr = ['#ffffff', '#000000', '#345a7c', '#115ebb', '#00ccff', '#4de6e6', '#cc3300', '#ca3593', '#9933cc', '#f96c8c', '#ffcc00', '#ff7c11', '#095e09', '#009933', '#a6ee44', '#432323'];
    $scope.fontColorEditShow = false;
    $scope.colorUlWidth = ($scope.colorArr.length + 1) * 50;
    $scope.textActiveColor = '#ffffff';
    $scope.fontColorEditShowFn = function() {
        SectionEvent.stop();
        $scope.fontColorEditShow = true;
        $scope.fontColorVal = jQuery('.mobileEvent').css('color');
        console.log($scope.fontColorVal);
        $scope.textActiveColor = $scope.fontColorVal;

    }
    $scope.fontColorCancelFn = function() {
            SectionEvent.start();
            $scope.fontColorEditShow = false;
        }
        // 确认修改
    $scope.fontColorSureFn = function() {
            SectionEvent.start();
            $scope.fontColorEditShow = false;
        }
        // 改变颜色的方法
    $scope.changeTextColor = function(color) {
            $scope.textActiveColor = color;
            jQuery('.mobileEvent').css({
                'color': color
            })
        }
        /**
         *设置对齐方式
         **/
    $scope.textAlignEditShow = false;
    $scope.textAlignEditShowFn = function() {
        SectionEvent.stop();
        $scope.textAlignEditShow = true;
        $scope.textAlignVal = jQuery('.mobileEvent').css('textAlign');
        jQuery('.setTextAligntBtn').removeClass('active');
        switch ($scope.textAlignVal) {
            case 'center':
                jQuery('.setTextAligntBtn.center').addClass('active');
                break;
            case 'left':
                jQuery('.setTextAligntBtn.left').addClass('active');
                break;
            case 'right':
                jQuery('.setTextAligntBtn.right').addClass('active');
                break;
        }
        console.log($scope.textAlignVal);
    }
    $scope.textAlignCancelFn = function() {
            SectionEvent.start();
            jQuery('.mobileEvent').css({
                'textAlign': $scope.textAlignVal,
            });
            $scope.textAlignEditShow = false;
        }
        // 确认修改
    $scope.textAlignSureFn = function() {
            SectionEvent.start();
            $scope.textAlignEditShow = false;
        }
        //  设置对齐方式的方法
    $scope.setTextAlignFn = function(type) {
        jQuery('.mobileEvent').css({
            'textAlign': type,
        });
        jQuery('.setTextAligntBtn').removeClass('active');
        switch (type) {
            case 'center':
                jQuery('.setTextAligntBtn.center').addClass('active');
                break;
            case 'left':
                jQuery('.setTextAligntBtn.left').addClass('active');
                break;
            case 'right':
                jQuery('.setTextAligntBtn.right').addClass('active');
                break;
        }
    }

}]);

 // 首页
 appController.controller('homeCtrl', ['$scope', '$rootScope', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicSlideBoxDelegate', 'localStorageService', 'ShareService', 'IonicService', 'Con', function($scope, $rootScope, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicSlideBoxDelegate, localStorageService, ShareService, IonicService, Con) {
     // 重置左上角的按钮
     // $rootScope.menuShow = true;
     // $rootScope.backShow = false;
     $scope.storys = [
         [],
         [],
         [],
         []
     ];
     $scope.more = true;
     $scope.navs = [{
         title: '推荐',
         order: 0,
         storyStatus: '3', //4暂时没数据 所以写3
         pageNum: 0
     }, {
         title: '品牌故事',
         order: 1,
         storyStatus: '1',
         pageNum: 0
     }, {
         title: '热点资讯',
         order: 2,
         storyStatus: '2',
         pageNum: 0
     }, {
         title: '生活故事',
         order: 3,
         storyStatus: '3',
         pageNum: 0
     }];

     $scope.isActiveTab = function(order) {
         // Con.log('isactive')
         // Con.log($scope.currentTab == order)
         return $scope.currentTab == order;
     };
     var User = JSON.parse(localStorageService.get('User'));
     if (User) {
         postParams = {
             userToken: User.token,
             userId: User.id,
         };
     } else {
         postParams = {
             userToken: '',
             userId: '',
         };
     }
     // Con.log('width');
     // Con.log(angular.element(window)[0].innerWidth);
     var win_w = angular.element(window)[0].innerWidth;
     $scope.img_w = win_w * 0.45 * 0.9 + 'px';
     // Con.log($scope.img_w);

     $scope.doRefresh = function(myActiveSlide) {
         $scope.more = true;
         $scope.currentTab = myActiveSlide;
         // Con.log($scope.currentTab);
         $scope.myActiveSlide = myActiveSlide;
         postParams.storyType = $scope.navs[myActiveSlide].storyStatus;
         $scope.navs[myActiveSlide].pageNum = 1;
         postParams.pageNum = $scope.navs[myActiveSlide].pageNum;
         IonicService.getHomeStorys(postParams).then(function(data) {
             // Con.log(data.storys)
             if (angular.equals(data.storys, [])) {
                 $scope.more = false;
                 $scope.$broadcast('scroll.infiniteScrollComplete');
             }
             if (data.storys) {
                 if (postParams.pageNum == 1) {
                     $scope.storys[$scope.currentTab] = data.storys;
                 }
             }
             // Con.log($scope.storys);
         }).finally(function() {
             $scope.$broadcast('scroll.refreshComplete');
         });
     };

     $scope.loadMore = function(myActiveSlide, del) {
         $scope.more = true;
         // Con.log('-----myActiveSlide------');
         // Con.log(myActiveSlide)
         try {
            
             $scope.currentTab = myActiveSlide;
             // Con.log($scope.currentTab);
             $scope.myActiveSlide = myActiveSlide;
             postParams.storyType = $scope.navs[myActiveSlide].storyStatus;
             $scope.navs[myActiveSlide].pageNum = $scope.navs[myActiveSlide].pageNum + 1;
             postParams.pageNum = $scope.navs[myActiveSlide].pageNum;
             Con.log(postParams.storyType);
             IonicService.getHomeStorys(postParams).then(function(data) {
                 // Con.log(data.storys)
                 if (angular.equals(data.storys, [])) {
                     $scope.more = false;
                     $scope.$broadcast('scroll.infiniteScrollComplete');
                 }
                 if (data.storys) {
                     if (postParams.pageNum == 1) {
                         $scope.storys[$scope.currentTab] = data.storys;
                     } else {
                         angular.forEach(data.storys, function(item) {
                             $scope.storys[$scope.currentTab].push(item);
                         });
                     }
                     $scope.$broadcast('scroll.infiniteScrollComplete');

                 }
                 // Con.log($scope.storys);
             });
             // switch (postParams.storyType) {
             //     case '1':
             //         IonicService.getHomeStorys(postParams).then(function(data) {
             //             Con.log(data)
             //             if (!data.storys[0]) {
             //                 $scope.more = false;
             //             }
             //             if (data.storys) {
             //                 if (postParams.pageNum == 1) {
             //                     $scope.storys = data.storys;
             //                 } else {
             //                     angular.forEach(data.storys, function(item) {
             //                         $scope.storys.push(item);
             //                     });
             //                 }
             //                 $scope.$broadcast('scroll.infiniteScrollComplete');

             //             }
             //         });
             //         break;
             //     case '2':
             //         IonicService.getHomeStorys(postParams).then(function(data) {
             //             if (!data.storys[0]) {
             //                 $scope.more = false;
             //             }
             //             if (data.storys) {
             //                 if (postParams.pageNum == 1) {
             //                     $scope.brandStorys = data.storys;
             //                 } else {
             //                     angular.forEach(data.storys, function(item) {
             //                         $scope.offLineStorys.push(item);
             //                     });
             //                 }
             //                 $scope.$broadcast('scroll.infiniteScrollComplete');
             //             }
             //         });
             //         break;
             //     case '3':
             //         Con.log('我的收藏');
             //         break;
             //     case '4':
             //         Con.log('我的动态');
             //         break;
             // }
         } catch (ex) {
             $scope.more = false;
         }

     };
     // 当前选中：
     $scope.myActiveSlide = '0';
     // $ionicSlideBoxDelegate.enableSlide(false);
 }]);

// 首页详情
appController.controller('homeDetailCtrl', ['$scope', '$rootScope', '$sce', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicPopover', '$ionicPopup', 'localStorageService', 'ShareService', 'IonicService', 'MsgBox', 'WechatApi', 'Con', function($scope, $rootScope, $sce, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicPopover, $ionicPopup, localStorageService, ShareService, IonicService, MsgBox, WechatApi, Con) {
    // $rootScope.menuShow = true;
    // $rootScope.backShow = true;
    // Con.log($stateParams);
    Con.log('首页详情');
    // Con.log($stateParams);
    // 用ifarme展示
    console.log($stateParams.storyObject)
    $scope.urlParams = JSON.parse($stateParams.storyObject);
    Con.log($scope.urlParams);
    if (!$scope.urlParams.browse_count) {
        $scope.urlParams.browse_count = 0;
    }
    if (!$scope.urlParams.share_count) {
        $scope.urlParams.share_count = 0;
    }
    if (!$scope.urlParams.collection_count) {
        $scope.urlParams.collection_count = 0;
    }
    // iframe需要sce转化之后才可以打开
    $scope.pubUrl = $sce.trustAsResourceUrl($scope.urlParams.pub_url);

    // Con.log(User);
    // Con.log($scope.pubUrl);
    // 收藏
    $scope.collectFn = function() {
        var User = JSON.parse(localStorageService.get('User'));
        if (User) {
            var data = {
                userToken: User.token,
                userId: User.id,
                objectId: $scope.urlParams.story_id
            };
            IonicService.postCollectStory(data).then(function(data) {
                Con.log(data);
                // Con.log(data.storys[0].collection_count);

                switch (data.messageType) {
                    case '1':
                        $scope.closePopover();
                        MsgBox.showTexts('收藏成功');
                        $scope.urlParams.collection_count = data.storys[0].collection_count;
                        break;
                    case '2':
                        localStorageService.remove('User');
                        $rootScope.openLoginModal();
                        break;
                    case '4':
                        $scope.closePopover();
                        MsgBox.showTexts('该故事你已收藏过');
                        break;
                }

            }).finally(function() {
                $scope.$broadcast('scroll.refreshComplete');
            });
        } else {
            $rootScope.openLoginModal();
        }
    };
    //分享弹窗提示
    $scope.showPopup = function() {
        //关闭分享模块面板
        $scope.closePopover();
        $scope.data = {};
        // 自定义弹窗
        var myPopup = $ionicPopup.show({
            templateUrl: 'templates/Area/appSharePopup.html',
            // title: '请点击浏览器右上角...按钮分享轻故事',
            scope: $scope,
            buttons: [{
                text: '<b>我知道了</b>',
                type: 'button-positive',
                onTap: function(e) {
                    myPopup.close();
                    //关闭的时候把特有的class清除
                    jQuery(function() {
                        setTimeout(function() {
                            jQuery('.popup-container').removeClass('sharePopupContainer');
                        }, 200);
                    });

                }
            }, ]
        });
        //设一个特有的class来设置样式
        jQuery(function() {
            jQuery('.popup-container').addClass('sharePopupContainer');
        });

    };
    $rootScope.shareStory = function() {
        IonicService.postShareStory({
            objectId: $scope.urlParams.story_id
        }).then(function(data) {
            Con.log(data);
            // Con.log(data.storys[0].collection_count);
            switch (data.messageType) {
                case '1':
                    // MsgBox.showTexts('收藏成功');
                    $scope.urlParams.share_count = data.storys[0].share_count;
                    break;
            }

        });
    };


    // 分享收藏模块
    $ionicPopover.fromTemplateUrl('templates/Area/appShare.html', {
        scope: $scope
    }).then(function(popover) {
        $scope.popover = popover;
    });


    $scope.openPopover = function($event) {
        $scope.popover.show($event);
    };
    $scope.closePopover = function() {
        $scope.popover.hide();
    };
    // 微信授权
    $rootScope.upal_share = {
        title: $scope.urlParams.story_title, // 分享标题
        desc: $scope.urlParams.second_title, // 分享描述
        share_link: $scope.urlParams.pub_url, // 分享链接
        imgUrl: $scope.urlParams.img_src, // 分享图标
        currentUrl: location.href //当前页面的网址，签名的时候要用
    };
    WechatApi.f_wxReady();
    // Con.log(User);

}]);

appController.controller('IndexCtrl', ['$scope', '$rootScope', 'localStorageService', '$state', '$ionicModal', '$ionicSlideBoxDelegate', '$timeout', 'IonicService', 'TabService', 'Con', function($scope, $rootScope, localStorageService, $state, $ionicModal, $ionicSlideBoxDelegate, $timeout, IonicService, TabService, Con) {
    $scope.badges = {
        message: 0
    };
    $scope.tabs = TabService.getTabs();
    $rootScope.UserInfo = JSON.parse(localStorageService.get('User'));
    // var User = JSON.parse(localStorageService.get('User'));
    // if (User) {
    //     // IonicService.getMessageCount(User.token).then(function(data) {
    //     //     $scope.badges.message = data.data;
    //     // });
    // }
    //退出
    $rootScope.loginOut = function() {
        Con.log('退出');
        localStorageService.remove('User');
        // $ionicHistory.nextViewOptions({
        //     disableAnimate: true,
        //     disableBack: true
        // });
        // $state.go("login");
        location.reload(true);
    };

}])

// lbs
appController.controller('lbsCtrl', ['$scope', '$rootScope', '$state', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicModal', '$ionicHistory', '$timeout', '$ionicNavBarDelegate', '$filter', '$compile', 'localStorageService', 'ShareService', 'IonicService', 'Con', 'Tool', function($scope, $rootScope, $state, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicModal, $ionicHistory, $timeout, $ionicNavBarDelegate, $filter, $compile, localStorageService, ShareService, IonicService, Con, Tool) {
    // 重置左上角的按钮
    // $rootScope.menuShow = true;
    // $rootScope.backShow = false;
    var map = new AMap.Map('container', {
        zoom: 10,
        center: [116.39, 23.9],
    });
    //获取坐标
    $scope.getLocation = function() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition($scope.showPosition, $scope.showError);
            } else {
                x.innerHTML = "Geolocation is not supported by this browser.";
            }
        }
        //用户同意获取地理位置执行该函数
    $scope.showPosition = function(position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            AMap.convertFrom([longitude, latitude],
                // AMap.convertFrom([116.368904, 39.923423],
                'gps',
                function(status, result) {
                    if (status == "complete") {
                        latitude = result.locations[0].lat;
                        longitude = result.locations[0].lng;
                        // alert(latitude);
                        // alert(longitude);
                        $scope.ininMap(longitude, latitude);

                    }

                    // if(status=='compile'){}
                })

        }
        //用户不同或出错的时候执行该函数
    $scope.showError = function(error) {
            $scope.ininMap(113.366693, 23.096714, true);
        }
        /*
          longitude:经度
          latitude：维度
          type：当true代表出错时候，不显示当前位置
        */
    $scope.ininMap = function(longitude, latitude, type) {
        // alert(latitude);
        // alert(longitude);
        AMap.service('AMap.CloudDataSearch', function() { //回调函数
            var center = [longitude, latitude];
            var search;
            var searchOptions = {
                keywords: '',
                // pageSize: 5,
                orderBy: '_id:ASC',
                filter: "status:1"
            };
            //加载CloudDataSearch服务插件
            search = new AMap.CloudDataSearch('57b67df9afdf522d4e2ab76d', searchOptions); //构造云数据检索类
            //周边检索
            search.searchNearBy(center, 100000000000, function(status, result) {
                // alert(status)
                console.log(result)
                if (status == "complete" && result.info == "OK") {
                    console.log(result);
                    console.log(result.datas);
                    // 成功筛选

                    // $scope.datas = $filter('filter')(result.datas,{category:'线下活动'});
                    $scope.datas = result.datas;
                    // $scope.datas = $filter('filter')($scope.datas, { status: '1' });
                    console.log($scope.datas);
                    console.log($scope.datas.length)
                        // console.log($filter('filter')($scope.datas, { category: '线下' }));
                    $scope.createMap($scope.datas);
                }
            });
            // console.log(search.searchNearBy(center, 10000))
        })

        var infoWindow = new AMap.InfoWindow();

        if (!type) {
            marker = new AMap.Marker({
                position: [longitude, latitude],
                map: map
            });
            marker.content = '你的位置';
            marker.on('click', markerClick);
        }


        function markerClick(e) {
            infoWindow.setContent(e.target.content);
            infoWindow.open(map, e.target.getPosition());
        }
        map.setCenter([longitude, latitude]);
        map.setZoom(18);
    }

    var isPC = Tool.isPC();
    // var isPC=true;
    // 为了方便电脑伤调试
    if (isPC) {
        $scope.ininMap(113.366693, 23.096714, true);
    }



    // var lnglats = [ //也可以使用LngLat对象
    //     [116.368904, 39.923423],
    //     [116.382122, 39.921176],
    //     [116.387271, 39.922501],
    //     [116.398258, 39.914600]
    // ];
    // var infoWindow = new AMap.InfoWindow();
    // for (var i = 0, marker; i < lnglats.length; i++) {
    //     marker = new AMap.Marker({
    //         position: lnglats[i],
    //         map: map
    //     });
    //     marker.content = '我是第' + i + '个信息窗体的内容';
    //     //给Marker绑定单击事件
    //     marker.on('click', markerClick);
    // }
    // map.setFitView();

    // function markerClick(e) {
    //     infoWindow.setContent(e.target.content);
    //     infoWindow.open(map, e.target.getPosition());
    // }

    // AMap.service('AMap.CloudDataSearch', function() { //回调函数
    //     var center = [113.366681, 23.096619];
    //     var search;
    //     var searchOptions = {
    //         keywords: '',
    //         // pageSize: 5,
    //         orderBy: '_id:ASC'
    //     };
    //     //加载CloudDataSearch服务插件
    //     search = new AMap.CloudDataSearch('57a94cc4305a2a693efc0d6e', searchOptions); //构造云数据检索类
    //     //周边检索
    //     search.searchNearBy(center, 10000, function(status, result) {
    //         if (status == "complete" && result.info == "OK") {
    //             console.log(result);
    //             console.log(result.datas);
    //             // 成功筛选

    //             // $scope.datas = $filter('filter')(result.datas,{category:'线下活动'});
    //             $scope.datas = result.datas;
    //             console.log($scope.datas);
    //             console.log($scope.datas.length)

    //             $scope.createMap($scope.datas);
    //         }
    //     });
    //     // console.log(search.searchNearBy(center, 10000))
    // })
    $scope.markers = [];
    $scope.test = 1;
    var iconJson = {

        }
        //描标注点并添加监听的方法 
    $scope.createMap = function(obj) {
        console.log('----------obj-----------');
        console.log(obj);
        console.log(obj.length);
        var infoWindow = new AMap.InfoWindow();
        for (var i = 0, marker; i < obj.length; i++) {
            console.log(obj[i])
            if (obj[i].type) {
                if (obj[i].type == 'group') {
                    var iconArr = $filter('filter')($scope.dropDownArr, { name: '全部' })[0];
                    console.log(iconArr);
                    if (iconArr) {
                        var IconUrl = iconArr.lbsIconUrl;

                        marker = new AMap.Marker({
                            position: [obj[i]._location.lng, obj[i]._location.lat],
                            icon: IconUrl,
                            map: map
                        });
                        marker.content = '<div class="markerDiv groupDiv" groupid="' + obj[i].groupID + '" grouptit="' + obj[i].h5title + '"><a href="javascript:;" class="markerDiva"><div class="imgarea"><img class="h5Img" src="' + obj[i].h5logo + '" /></div><div class="wordArea"><h2>' + obj[i].h5title + '</h2><p>' + obj[i].description + '</p></div><div class="linkIcon"><img  src="img/iconRight.png" /></div></a></div>';
                        //给Marker绑定单击事件
                        marker.on('click', markerClick);
                        marker.emit('click', { target: marker });
                        $scope.markers.push(marker);
                    }
                } else if (obj[i].type == 'story' && obj[i].groupID == '0') {
                    var iconArr = $filter('filter')($scope.dropDownArr, { name: obj[i].category })[0];
                    console.log(iconArr);
                    if (iconArr) {
                        var IconUrl = iconArr.lbsIconUrl;

                        marker = new AMap.Marker({
                            position: [obj[i]._location.lng, obj[i]._location.lat],
                            icon: IconUrl,
                            map: map
                        });
                        marker.content = '<div class="markerDiv storyDiv" storyId="' + obj[i].storyId + '"><a href="javascript:;" ><div class="imgarea"><img class="h5Img" src="' + obj[i].h5logo + '" /></div><div class="wordArea"><h2>' + obj[i].h5title + '</h2><p>' + obj[i].description + '</p></div></a></div>';
                        //给Marker绑定单击事件
                        marker.on('click', markerClick);
                        marker.emit('click', { target: marker });
                        $scope.markers.push(marker);
                    }
                }

            }
        }
        map.setFitView(); //加这句所有点会聚焦

        function markerClick(e) {
            infoWindow.setContent(e.target.content);
            infoWindow.open(map, e.target.getPosition());
            map.setCenter([e.target.getPosition().lng, e.target.getPosition().lat]);
            $timeout(function() {
                jQuery('.groupDiv').on('click', function() {
                    var groupid = jQuery(this).attr('groupid');
                    console.log(groupid)
                    $rootScope.grouptit = jQuery(this).attr('grouptit');
                    $timeout(function() {
                        $scope.fliterStoryByGroupId(groupid);
                    });
                });
                jQuery('.storyDiv').on('click', function() {
                    var storyId = jQuery(this).attr('storyId');
                    console.log(storyId)
                    $timeout(function() {
                        $scope.fliterStoryByStoryId(storyId);
                    });
                })
            }, 200);

        }
    };

    //根据groupId筛选组别中的故事(根据groupId 跟故事类型为故事的，把type:group的剔除)
    $scope.fliterStoryByGroupId = function(groupId) {
        groupId = groupId.toString();
        $scope.StoryList = $filter('filter')($scope.datas, { groupID: groupId, type: "story" });
        $rootScope.lbsStoryList = [];
        $rootScope.lbsGroupTitle =
            console.log($scope.StoryList);
        jQuery.each($scope.StoryList, function(k, v) {
            var jsonInterface = {
                "story_title": v.h5title,
                "img_src": v.h5logo,
                // "id": "21",
                "story_id": v.storyId,
                "share_count": v.sharecount,
                "second_title": v.description,
                "browse_count": v.referencecount,
                "collection_count": v.collectioncount,
                "pub_url": v.h5url,
                // "story_type": "3"
            };
            $rootScope.lbsStoryList.push(jsonInterface);
        });
        console.log($scope.lbsStoryList);
        // $rootScope.openGroupModal();
        $state.go('tab.lbsGroupDetail');
    };
    // 根据storyId筛选数据
    $scope.fliterStoryByStoryId = function(storyId) {
        storyId = storyId.toString();
        var storyInfo = $filter('filter')($scope.datas, { storyId: storyId })[0];
        console.log(storyInfo);
        var storyInterface = {
            "story_title": storyInfo.h5title,
            "img_src": storyInfo.h5logo,
            // "id": "21",
            "story_id": storyInfo.storyId,
            "share_count": storyInfo.sharecount,
            "second_title": storyInfo.description,
            "browse_count": storyInfo.referencecount,
            "collection_count": storyInfo.collectioncount,
            "pub_url": storyInfo.h5url,
            // "story_type": "3"
        };
        storyInterface = JSON.stringify(storyInterface);
        // tab.homeDetail({ storyObject: '{{story}}'})
        // // $rootScope.openGroupModal();
        $state.go('tab.homeDetail', { storyObject: storyInterface });
    };

    // 过滤并重新渲染标记的方法：传入一个json对象{category:'线下活动'}
    $scope.myFilter = function(json, type) {
        $scope.toggle(json);
        // 清除之前的标记
        map.remove($scope.markers);
        // jQuery('.amap-info').remove();
        if (json.category == "全部") {
            console.log($scope.datas)
            $scope.filterDatas = $filter('filter')($scope.datas, {});
            console.log($scope.filterDatas)
        } else {
            $scope.filterDatas = $filter('filter')($scope.datas, json);
        }
        if (!type) {
            // 当type没传的时候，重新渲染标记
            $scope.createMap($scope.filterDatas);
        }
    }

    // 切换按钮
    $scope.activeTit = '全部';
    $scope.dropDownArr = [{ name: '全部', icon: '', active: true, lbsIconUrl: 'img/more@2x.png' }, { name: '线下活动', icon: 'icon-upalapp-huodong-off', active: false, lbsIconUrl: 'img/huodong@2x.png' }, { name: '神秘事件', icon: 'icon-upalapp-shijian-off', active: false, lbsIconUrl: 'img/shijian@2x.png' }, { name: '折扣优惠', icon: 'icon-upalapp-zhekou-off', active: false, lbsIconUrl: 'img/zhekou.png' }, { name: '文青聚点', icon: 'icon-upalapp-wenqing-off', active: false, lbsIconUrl: 'img/wenqing@2x.png' }, { name: '桌游聚点', icon: 'icon-upalapp-zhuoyou-off', active: false, lbsIconUrl: 'img/zhuoyou@2x.png' }];
    $scope.visible = false;
    $scope.toggle = function(json) {
        console.log(json);
        console.log($scope.dropDownArr);

        var filterArr = $filter('filter')($scope.dropDownArr, { name: json.category })[0];
        jQuery('.lbsTitSpan').text(json.category);
        jQuery.each($scope.dropDownArr, function(k, v) {
            if (v.name == json.category) {
                $scope.dropDownArr[k].active = true;
                $scope.activeTit = json.category;
            } else {
                $scope.dropDownArr[k].active = false;
            }
        })
        if (json.category == "全部") {
            jQuery('.lbsTitSpan').text('发现');
        }
        $scope.visible = !$scope.visible;
        $scope.dropshow = !$scope.dropshow;
    };
    $scope.dropshow = true;


    // 调用获取位置信息
    $scope.getLocation();

    // IonicService.postStoryData({"storyId":21505,"webPrefix":"-webkit-"}).then(function(data) {
    //     Con.log(data);

    // });

}]);

// lbs组详细页面
appController.controller('lbsGroupDetailCtrl', ['$scope', '$rootScope', '$sce', '$stateParams', '$ionicLoading', '$ionicScrollDelegate', '$ionicPopover', '$ionicPopup', 'localStorageService', 'ShareService', 'IonicService', 'MsgBox', 'WechatApi', 'Con', function($scope, $rootScope, $sce, $stateParams, $ionicLoading, $ionicScrollDelegate, $ionicPopover, $ionicPopup, localStorageService, ShareService, IonicService, MsgBox, WechatApi, Con) {
    // $rootScope.menuShow = true;
    // $rootScope.backShow = true;
    // Con.log($stateParams);
    Con.log('lbs组控制器');
    // Con.log($stateParams);
    // 用ifarme展示
    console.log($rootScope.lbsStoryList)
        // $scope.lbsStoryList = JSON.parse($stateParams.lbsStoryList);
        // console.log($scope.lbsStoryList)


}]);

//登录
appController.controller('loginCtrl', ['$scope', '$rootScope', '$ionicPopup', '$ionicHistory', '$state', '$cordovaBarcodeScanner', '$ionicSlideBoxDelegate', '$interval', '$timeout', '$ionicModal','$ionicLoading', 'localStorageService', 'AppVersionService', 'IonicService', 'MsgBox', 'Con', function($scope, $rootScope, $ionicPopup, $ionicHistory, $state, $cordovaBarcodeScanner, $ionicSlideBoxDelegate, $interval, $timeout, $ionicModal,$ionicLoading, localStorageService, AppVersionService, IonicService, MsgBox, Con) {
    /*        AppVersionService.getVersionNumber().then(function (data) {
     $scope.appVersion = data;
     });*/
    Con.log('启用登录控制器');
    // Con.log($ionicHistory.viewHistory())
    // 重置左上角的按钮


    // if ($ionicHistory.viewHistory().backView) {
    //     $rootScope.menuShow = false;
    //     $rootScope.backShow = true;
    // } else {
    //     $rootScope.menuShow = true;
    //     $rootScope.backShow = false;
    // }
    // $scope.modal.hide();
    // var loginInfo = localStorageService.get('User');
    // if (loginInfo) {
    //     // $location.path('/tab/user');
    //     $ionicHistory.goBack();
    // }
    // $scope.quickUser['phoneNumber']='18026142152'
    // $scope.quickUser={
    //     phoneNumber:18102512553,
    //     validateCode:111111
    // }
    // $timeout(function() {
    //         Con.log($scope.quickUser)
    //     }, 6000)
    //测试账号1快速登陆
    $scope.quickUser = {
        phoneNumber: '',
        validateCode: ''
    };
    $scope.testLogin = function() {
        IonicService.postLogin({ account: '15917436116', password: '123456' }).then(function(data) {
            Con.log(data.status);
            switch (data.status) {
                case '0':
                    MsgBox.showTexts('账号或密码错误');
                    break;
                case '1':
                    User = data.userInfo;
                    localStorageService.set('User', JSON.stringify(User));
                    $rootScope.closeLoginModal();
                    // var currentId = $ionicHistory.viewHistory().currentView.stateId;
                    $rootScope.changePage($rootScope.changeState, true);

                    // $state.go(currentId,{reload:true});
            }
            // Con.log(data)
            var test = localStorageService.get('User');
            Con.log(test);
        });
    };
    //测试账号2快速登陆
    $scope.test2Login = function() {
         // Setup the loader
        $ionicLoading.show({
            content: 'Loading',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });
        IonicService.postLogin({ account: '377210718@qq.com', password: 'yf123456' }).then(function(data) {
            Con.log(data.status);
            $ionicLoading.hide();
            switch (data.status) {
                case '0':
                    MsgBox.showTexts('账号或密码错误');
                    break;
                case '1':
                    User = data.userInfo;
                    localStorageService.set('User', JSON.stringify(User));
                    $rootScope.closeLoginModal();
                    // var currentId = $ionicHistory.viewHistory().currentView.stateId;
                    $rootScope.changePage($rootScope.changeState, true);

                    // $state.go(currentId,{reload:true});
            }
            // Con.log(data)
            var test = localStorageService.get('User');
            Con.log(test);
        });
    };


    $scope.loginTitile = '手机号登录';
    $scope.login = function(user) {
        if (typeof(user) == 'undefined' || !user.account) {
            // $scope.showAlert('请输入账号');
            MsgBox.showTexts('请输入账号');
            return false;
        }
        var phoneReg = /1[3|5|7|8|][0-9]{9}/;
        var emailReg = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
        if ((!phoneReg.test(user.account)) && (!emailReg.test(user.account))) {
            MsgBox.showTexts('请输入正确的账号');
            return false;
        }
        if (typeof(user) == 'undefined' || !user.password) {
            MsgBox.showTexts('请输入密码');
            return false;
        }
        // Setup the loader
        $ionicLoading.show({
            content: 'Loading',
            animation: 'fade-in',
            showBackdrop: true,
            maxWidth: 200,
            showDelay: 0
        });
        IonicService.postLogin(user).then(function(data) {
            Con.log(data.status);
            $ionicLoading.hide();
            switch (data.status) {
                case '0':
                    MsgBox.showTexts('账号或密码错误');
                    break;
                case '1':
                    User = data.userInfo;
                    localStorageService.set('User', JSON.stringify(User));
                    $rootScope.closeLoginModal();
                    // var currentId = $ionicHistory.viewHistory().currentView.stateId;
                    $rootScope.changePage($rootScope.changeState, true);

                    // $state.go(currentId,{reload:true});
            }
            // Con.log(data)
            var test = localStorageService.get('User');
            Con.log(test);

        });


    };
    $scope.isDisabled = false;
    $scope.verTxt = '获取验证码';
    var alltime = 60;
    //获取手机验证码
    $scope.ajaxSendValidate = function(phoneNumber) {
        if (!phoneNumber) {
            MsgBox.showTexts('请输入手机号码');
            return false;
        }
        var reg1 = /1[3|5|7|8|][0-9]{9}/;
        if (!reg1.test(phoneNumber)) {
            MsgBox.showTexts('请输入有效的手机号码');
            return false;
        }
        $scope.isDisabled = true;
        $scope.verTxt = '60s';
        var timer = $interval(function() {
            if (alltime > 0) {
                alltime--;
                $scope.verTxt = alltime + 's';
            } else {
                $scope.isDisabled = false;
                $scope.verTxt = '获取验证码';
                $interval.cancel(timer);
            }
        }, 1000);
        IonicService.postPhoneCode({ 'phoneNumber': phoneNumber }).then(function(data) {
            Con.log(data.status);
            switch (data.status) {
                case '0':
                    MsgBox.showTexts('获取手机验证码失败');
                    break;
                case '1':
                    MsgBox.showTexts('成功获取手机验证码');
            }
        });
    };
    //快速登录

    $scope.quickLogin = function(quickuser) {
        if (typeof(quickuser) == 'undefined' || !quickuser.phoneNumber) {
            MsgBox.showTexts('请输入手机号码');
            return false;
        }
        if (typeof(quickuser) == 'undefined' || !quickuser.validateCode) {
            MsgBox.showTexts('请输入验证码');
            return false;
        }
        IonicService.postQuickLogin(quickuser).then(function(data) {
            Con.log(data.status);
            switch (data.status) {
                case '0':
                    MsgBox.showTexts('账号或密码错误');
                    // Con.log($scope.quickUser)
                    $timeout(function() {
                        $scope.quickUser = {
                            phoneNumber: quickuser.phoneNumber,
                            validateCode: ''
                        };
                        jQuery('.phoneCode').focus();
                        jQuery('.phoneCode').val('');
                        Con.log($scope.quickUser);
                    }, 1500);
                    break;
                case '1':
                    User = data.userInfo;
                    localStorageService.set('User', JSON.stringify(User));
                    $rootScope.closeLoginModal();
                    $rootScope.changePage($rootScope.changeState, true);
                    // $state.go('tab.user');
            }
            // Con.log(data)
            // var test = localStorageService.get('User');
        });


    };

    // An alert dialog
    $scope.showAlert = function(msg) {
        var alertPopup = $ionicPopup.alert({
            title: '输入错误',
            template: msg
        });

    };

    // 切换
    $scope.slideChangefn = function(index) {
        // $scope.myActiveSlide = index;
        $ionicSlideBoxDelegate.slide(index, 300);
    };
    $scope.loginslideChange = function(index) {
        switch (index) {
            case 0:
                $scope.loginTitile = '手机号登录';
                break;
            case 1:
                $scope.loginTitile = '密码登录';
                break;
        }
    };
    $ionicSlideBoxDelegate.$getByHandle('homeListBox').enableSlide(false);
    // $ionicSlideBoxDelegate.enableSlide(false);
}]);

appController.controller('TabsCtrl', ['$scope', '$rootScope', 'localStorageService', '$state', '$ionicModal', '$ionicSlideBoxDelegate', '$timeout', 'IonicService', 'TabService', 'WechatApi', 'Con', function($scope, $rootScope, localStorageService, $state, $ionicModal, $ionicSlideBoxDelegate, $timeout, IonicService, TabService, WechatApi, Con) {
    $rootScope.$on('$ionicView.beforeEnter', function() {
        var statename = $state.current.name;
        // Con.log('-------statename----');
        // Con.log(statename);
        //tabs中存在的主页面不需要隐藏，hidetabs=false
        if (statename === 'tab.homeDetail' || statename === 'tab.edit' || statename === 'tab.moreDesign' || statename === 'tab.designDetail' || statename === 'tab.previewStory' || statename === 'tab.setStoryInfo'|| statename === 'tab.setStoryCategories') {
            $rootScope.hideTabs = true;
        } else {
            $rootScope.hideTabs = false;
        }
    });

    // 模态框登陆
    $ionicModal.fromTemplateUrl('templates/login.html', {
        scope: $scope,
        animation: 'slide-in-up'
    }).then(function(modal) {
        $scope.loginmodal = modal;
    });
    $rootScope.openLoginModal = function() {
        $rootScope.UserInfo = JSON.parse(localStorageService.get('User'));
        if ($rootScope.UserInfo) {
            alert('你已经登陆');
        } else {
            $scope.loginmodal.show();
        }
    };
    $rootScope.closeLoginModal = function(type) {
        if (type && (($rootScope.changeState == 'tab.lbs') || ($rootScope.changeState == 'tab.user'))) {
            $state.go('tab.home');
        }
        $scope.loginmodal.hide();
    };
    $rootScope.changePage = function(state, reload) {
        $rootScope.changeState = state;
        $rootScope.UserInfo = JSON.parse(localStorageService.get('User'));
        // Con.log('------changestate------')
        // Con.log(state)
        // Con.log($rootScope.UserInfo)
        if ($rootScope.changeState == 'tab.home'|| ($rootScope.changeState == 'tab.design')) {
            $state.go(state);
            return false;
        }
        if ($rootScope.UserInfo) {
            if ((($rootScope.changeState == 'tab.user') || ($rootScope.changeState == 'tab.design')) && reload) {
                Con.log('重载');
                $state.go(state);
                $timeout(function() {
                    location.reload(true);
                }, 200);
            } else {
                Con.log('不重载');
                $state.go(state);
            }

        } else {
            $rootScope.openLoginModal();
        }
    };
    WechatApi.f_wxShare();

}]);
